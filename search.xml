<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>jupyter</title>
      <link href="/jupyter/"/>
      <url>/jupyter/</url>
      
        <content type="html"><![CDATA[<p>jupyter命令一览。<br><a id="more"></a></p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h2><p><a href="http://jupyter.org/install" target="_blank" rel="noopener">官方网站</a> </p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>pip install jupyter --user</code> 安装<br><code>jupyter notebook</code> 进入笔记本</p><h2 id="修改默认路径和浏览器"><a href="#修改默认路径和浏览器" class="headerlink" title="修改默认路径和浏览器"></a>修改默认路径和浏览器</h2><p>Windows默认在chrome里面打开：<br>1.命令行：jupyter notebook –generate-config<br>2.打开文件：jupyter_notebook_config.py<br>3.在文件头部添加:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line">webbrowser.register(<span class="string">'chrome'</span>, <span class="keyword">None</span>, webbrowser.GenericBrowser(<span class="string">u'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'</span>))</span><br><span class="line">c.NotebookApp.browser = <span class="string">'chrome'</span></span><br></pre></td></tr></table></figure></p><p>路径需要酌情调整。</p><h1 id="在nbviewer中查看"><a href="#在nbviewer中查看" class="headerlink" title="在nbviewer中查看"></a>在nbviewer中查看</h1><p>github文件的网址中把<code>https://github.com</code> 替换为<code>https://nbviewer.jupyter.org/github</code> 。<br>注意斜线个数。<a href="https://nbviewer.jupyter.org/github/cjql/myjupyter/blob/master/MySQL.ipynb" target="_blank" rel="noopener">典型示例</a>：<code>https://nbviewer.jupyter.org/github/cjql/myjupyter/blob/master/MySQL.ipynb</code><br><a href="http://nbviewer.jupyter.org/faq" target="_blank" rel="noopener">官方网站</a></p><h1 id="格式转换-html、md、pdf、letex"><a href="#格式转换-html、md、pdf、letex" class="headerlink" title="格式转换: html、md、pdf、letex"></a>格式转换: html、md、pdf、letex</h1><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://cloud.tencent.com/developer/article/1008571" target="_blank" rel="noopener">格式转换</a></p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p><a href="https://ipython.org/ipython-doc/3/notebook/nbconvert.html" target="_blank" rel="noopener">官方文档</a><br><a href="https://cloud.tencent.com/developer/article/1008490" target="_blank" rel="noopener">腾讯云入门教程1</a> <a href="https://hub.packtpub.com/getting-started-jupyter-notebook-part-1/" target="_blank" rel="noopener">英文参考文献</a><br><a href="https://cloud.tencent.com/developer/article/1008493" target="_blank" rel="noopener">腾讯云入门教程2</a> <a href="https://hub.packtpub.com/getting-started-jupyter-notebook-part-2/" target="_blank" rel="noopener">英文参考文献</a></p><h2 id="命令式"><a href="#命令式" class="headerlink" title="命令式"></a>命令式</h2><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>jupyter nbconvert –to html notebook.ipynb</td><td>ipynb转为html格式</td></tr><tr><td>jupyter nbconvert –to html –template full notebook.ipynb</td><td>对生成的html格式进行配置，默认配置，提供完整的静态html格式，交互性更强。</td></tr><tr><td>jupyter nbconvert –to html –template basic notebook.ipynb</td><td>简化的html，用于嵌入网页、博客等，这不包括html标题。</td></tr><tr><td>jupyter nbconvert –to md notebook.ipynb</td><td>简单的Markdown格式输出，cell单元不受影响，代码cell缩进4个空格。</td></tr><tr><td>jupyter nbconvert –to letex notebook.ipynb</td><td>Letex导出格式，生成后缀名为NOTEBOOK_NAME.tex的文件。</td></tr><tr><td>jupyter nbconvert –to letex -template article notebook.ipynb</td><td>默认配置，Latex文章。</td></tr><tr><td>jupyter nbconvert –to letex -template report notebook.ipynb</td><td>Latex报告，提供目录和章节。</td></tr><tr><td>jupyter nbconvert –to letex -template basic notebook.ipynb</td><td>最基本的Latex输出，经常用来自定义配置。</td></tr><tr><td>jupyter nbconvert –to pdf notebook.ipynb</td><td>转换为pdf格式分模板配置与latex配置是一样的。需要提前安装xelatex。</td></tr><tr><td>sudo apt-get install texlive-full</td><td>方法是安装texLive套装，texlive-full的安装包有点大，约1G多。</td></tr></tbody></table><h2 id="面板式"><a href="#面板式" class="headerlink" title="面板式"></a>面板式</h2><p>ipynb转换为html、md、pdf等格式，还有另一种更简单的方法：在jupyter notebook中，选择<code>File-&gt;Download as</code>，直接选择需要转换的格式就可以了。需要注意的是，转换为pdf格式之前，同样要保证已经安装了xelatex。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 后续学习 </tag>
            
            <tag> jupyter </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pythonmysql</title>
      <link href="/pythonmysql/"/>
      <url>/pythonmysql/</url>
      
        <content type="html"><![CDATA[<p>开始学习python的mysql连接。<br><a id="more"></a></p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><blockquote><ul><li><a href="https://www.apachefriends.org/zh_cn/index.html" target="_blank" rel="noopener">xampp</a></li><li><code>pip install pymysql --user</code></li><li>/xampp/phpMyadmin，打开config.inc.php文件，查看MySQL配置的用户和密码<br>参考教程：<a href="http://www.runoob.com/python3/python3-mysql.html" target="_blank" rel="noopener">菜鸟</a> <a href="https://dev.mysql.com/doc/refman/8.0/en/mysql-internals.html" target="_blank" rel="noopener">MySQL官方文档</a></li></ul></blockquote><p># </p><h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><p>DB API中定义了一些数据库操作的错误及异常，下表列出了这些错误和异常:</p><table><thead><tr><th>异常</th><th>描述</th></tr></thead><tbody><tr><td>Warning</td><td>当有严重警告时触发，例如插入数据是被截断等等。必须是 StandardError 的子类。</td></tr><tr><td>Error</td><td>警告以外所有其他错误类。必须是 StandardError 的子类。</td></tr><tr><td>InterfaceError</td><td>当有数据库接口模块本身的错误（而不是数据库的错误）发生时触发。 必须是Error的子类。</td></tr><tr><td>DatabaseError</td><td>和数据库有关的错误发生时触发。 必须是Error的子类。</td></tr><tr><td>DataError</td><td>当有数据处理时的错误发生时触发，例如：除零错误，数据超范围等等。 必须是DatabaseError的子类。</td></tr><tr><td>OperationalError</td><td>指非用户控制的，而是操作数据库时发生的错误。例如：连接意外断开、 数据库名未找到、事务处理失败、内存分配错误等等操作数据库是发生的错误。 必须是DatabaseError的子类。</td></tr><tr><td>IntegrityError</td><td>完整性相关的错误，例如外键检查失败等。必须是DatabaseError子类。</td></tr><tr><td>InternalError</td><td>数据库的内部错误，例如游标（cursor）失效了、事务同步失败等等。 必须是DatabaseError子类。</td></tr><tr><td>ProgrammingError</td><td>程序错误，例如数据表（table）没找到或已存在、SQL语句语法错误、 参数数量错误等等。必须是DatabaseError的子类。</td></tr><tr><td>NotSupportedError</td><td>不支持错误，指使用了数据库不支持的函数或API等。例如在连接对象上 使用.rollback()函数，然而数据库并不支持事务或者事务已关闭。 必须是DatabaseError的子类。</td></tr></tbody></table><h3 id="OperationalError-1045-“Access-denied-for-user-‘testuser‘-’localhost’-using-password-YES-”"><a href="#OperationalError-1045-“Access-denied-for-user-‘testuser‘-’localhost’-using-password-YES-”" class="headerlink" title="OperationalError: (1045, “Access denied for user ‘testuser‘@’localhost’ (using password: YES)”)"></a>OperationalError: (1045, “Access denied for user ‘testuser‘@’localhost’ (using password: YES)”)</h3><p>数据库连接错误，如何添加密码</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hello</title>
      <link href="/hello/"/>
      <url>/hello/</url>
      
        <content type="html"><![CDATA[<p>个人建站历程留影。邂逅了 MOxFIVE ，流连忘返不可收拾。一口气魔改到令自己还算满意。中间修复了 GitHub 的图标不能显示的 bug ，好不高兴。榜样在前，没有理由不好好学习。<br><a id="more"></a><br>#</p><table><thead><tr><th>ISBN</th><th>Date</th><th>pages</th><th>price</th><th>author</th><th>title</th></tr></thead><tbody><tr><td>9787533543341</td><td>2013-8-1</td><td>140</td><td>CNY 29.80</td><td>理想·宅</td><td><a href="https://book.douban.com/subject/30197610/" target="_blank" rel="noopener">创意家居客厅造价与材料注释系列</a></td></tr><tr><td>9787533543372</td><td>2013-8-1</td><td>140</td><td>CNY 29.80</td><td>理想·宅</td><td><a href="https://book.douban.com/subject/30197611/" target="_blank" rel="noopener">创意家居客厅造价与材料注释系列</a></td></tr><tr><td>9787533543358</td><td>2013-7-1</td><td>140</td><td>CNY 29.80</td><td>理想·宅</td><td><a href="https://book.douban.com/subject/30197612/" target="_blank" rel="noopener">创意家居客厅造价与材料注释系列</a></td></tr><tr><td>9787533543365</td><td>2013-8-1</td><td>140</td><td>CNY 29.80</td><td>理想·宅</td><td><a href="https://book.douban.com/subject/30197613/" target="_blank" rel="noopener">创意家居客厅造价与材料注释系列</a></td></tr><tr><td>9780521128414</td><td></td><td></td><td></td><td></td><td><a href="https://book.douban.com/subject/30197614/" target="_blank" rel="noopener">reading William Blake</a></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td><a href="https://book.douban.com/subject/30197615/" target="_blank" rel="noopener"></a></td></tr><tr><td>9787533543310</td><td>2013-9-1</td><td>140</td><td>CNY 23.00</td><td>王双忠</td><td><a href="https://book.douban.com/subject/30197616/" target="_blank" rel="noopener">运动健身丛书</a></td></tr><tr><td>9787533552862</td><td>2017-8-1</td><td>30</td><td>CNY 32.00</td><td>哈皮童年</td><td><a href="https://book.douban.com/subject/30197617/" target="_blank" rel="noopener">中华传统经典故事绘本</a></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td><a href="https://book.douban.com/subject/30197618/" target="_blank" rel="noopener"></a></td></tr><tr><td>9781442496910</td><td>2014</td><td></td><td></td><td>Jordan Quinn</td><td><a href="https://book.douban.com/subject/30197619/" target="_blank" rel="noopener">The Kindom of Wrenly 1</a></td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><table><thead><tr><th>主体</th><th>网址</th></tr></thead><tbody><tr><td>hexo</td><td><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> <a href="https://hexo.io/docs/" target="_blank" rel="noopener">Documentation</a> <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a> <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a> <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a> <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a><br> <a href="https://xuanwo.io/2014/08/14/hexo-usual-problem/" target="_blank" rel="noopener">常见问题</a>  <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">Troubleshooting</a>  <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a> </td></tr><tr><td>moxfive</td><td><a href="http://moxfive.xyz/2015/08/20/blog-building/" target="_blank" rel="noopener">建站日志</a> <a href="http://moxfive.xyz/" target="_blank" rel="noopener">个人网站</a> <a href="https://github.com/MOxFIVE" target="_blank" rel="noopener">github</a></td></tr><tr><td>颜色</td><td><a href="http://www.w3school.com.cn/cssref/css_colorsfull.asp" target="_blank" rel="noopener">一览</a> <a href="https://www.sioe.cn/yingyong/yanse-rgb-16/" target="_blank" rel="noopener">转换</a></td></tr><tr><td>花案</td><td><a href="http://www.haowangming.cc/teshufuhao/" target="_blank" rel="noopener">特殊符号</a></td></tr></tbody></table><h1 id="遗留"><a href="#遗留" class="headerlink" title="遗留"></a>遗留</h1><h2 id="加油"><a href="#加油" class="headerlink" title="加油"></a>加油</h2><p>看配色方案：准备冷暖两套六级渐变色<br>首页如何列表显示<br>如何加入分类</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>如何为姐姐快速部署一个呢？</p><blockquote><p>所需素材：六张背景图，一张图标，日志文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config和密钥</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="2018年12月12日"><a href="#2018年12月12日" class="headerlink" title="2018年12月12日"></a>2018年12月12日</h1><h2 id="用到过的命令"><a href="#用到过的命令" class="headerlink" title="用到过的命令"></a>用到过的命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install --save hexo-generator-search</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> unpack</span><br><span class="line"><span class="comment"># 将通达信的日线文件转换成CSV格式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">day2csv</span><span class="params">(source_dir, file_name, target_dir)</span>:</span></span><br><span class="line">    <span class="comment"># 以二进制方式打开源文件</span></span><br><span class="line">    source_file = open(source_dir + os.sep + file_name, <span class="string">'rb'</span>)</span><br><span class="line">    buf = source_file.read()</span><br><span class="line">    source_file.close()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 打开目标文件，后缀名为CSV</span></span><br><span class="line">    target_file = open(target_dir + os.sep + file_name + <span class="string">'.csv'</span>, <span class="string">'w'</span>)</span><br><span class="line">    buf_size = len(buf)</span><br><span class="line">    rec_count = buf_size / <span class="number">32</span></span><br><span class="line">    begin = <span class="number">0</span></span><br><span class="line">    end = <span class="number">32</span></span><br><span class="line">    header = str(<span class="string">'date'</span>) + <span class="string">', '</span> + str(<span class="string">'open'</span>) + <span class="string">', '</span> + str(<span class="string">'high'</span>) + <span class="string">', '</span> + str(<span class="string">'low'</span>) + <span class="string">', '</span> \</span><br><span class="line">        + str(<span class="string">'close'</span>) + <span class="string">', '</span> + str(<span class="string">'amount'</span>) + <span class="string">', '</span> + str(<span class="string">'vol'</span>) + <span class="string">', '</span> + str(<span class="string">'str07'</span>) + <span class="string">'\n'</span></span><br><span class="line">    target_file.write(header)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(rec_count)):</span><br><span class="line">        <span class="comment"># 将字节流转换成Python数据格式</span></span><br><span class="line">        <span class="comment"># I: unsigned int</span></span><br><span class="line">        <span class="comment"># f: float</span></span><br><span class="line">        a = unpack(<span class="string">'IIIIIfII'</span>, buf[begin:end])</span><br><span class="line">        line = str(a[<span class="number">0</span>]) + <span class="string">', '</span> + str(a[<span class="number">1</span>] / <span class="number">100.0</span>) + <span class="string">', '</span> + str(a[<span class="number">2</span>] / <span class="number">100.0</span>) + <span class="string">', '</span> \</span><br><span class="line">            + str(a[<span class="number">3</span>] / <span class="number">100.0</span>) + <span class="string">', '</span> + str(a[<span class="number">4</span>] / <span class="number">100.0</span>) + <span class="string">', '</span> + str(a[<span class="number">5</span>] / <span class="number">10.0</span>) + <span class="string">', '</span> \</span><br><span class="line">            + str(a[<span class="number">6</span>]) + <span class="string">', '</span> + str(a[<span class="number">7</span>]) + <span class="string">', '</span> + <span class="string">'\n'</span></span><br><span class="line">        target_file.write(line)</span><br><span class="line">        begin += <span class="number">32</span></span><br><span class="line">        end += <span class="number">32</span></span><br><span class="line">    target_file.close()</span><br><span class="line"> </span><br><span class="line">source = <span class="string">'C:/通达信测试版/vipdoc/sh/lday'</span></span><br><span class="line">target = <span class="string">'D:/tdxday'</span></span><br><span class="line">file_list = os.listdir(source)</span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> file_list:</span><br><span class="line">    day2csv(source, f, target)</span><br></pre></td></tr></table></figure><h2 id="查看文章更新"><a href="#查看文章更新" class="headerlink" title="查看文章更新"></a>查看文章更新</h2><p><a href="https://github.com/cjql/blog/edit/master/themes/iyelee/layout/_partial/post/copyright.ejs" target="_blank" rel="noopener">themes\iyelee\layout_partial\post\copyright.ejs</a><br>非常值得细看，参考<a href="http://moxfive.xyz/2016/01/10/hexo-post-version-control/" target="_blank" rel="noopener">moxfive</a></p><h2 id="头像和ico"><a href="#头像和ico" class="headerlink" title="头像和ico"></a>头像和ico</h2><p><a href="https://github.com/cjql/blog/tree/master/themes/iyelee/source/resources" target="_blank" rel="noopener">themes\iyelee\source\resources</a></p><h2 id="设置背景图案"><a href="#设置背景图案" class="headerlink" title="设置背景图案"></a>设置背景图案</h2><p><a href="https://github.com/cjql/blog/tree/master/themes/iyelee/source/background" target="_blank" rel="noopener">themes\iyelee\source\background</a></p><h2 id="社区链接图标"><a href="#社区链接图标" class="headerlink" title="社区链接图标"></a>社区链接图标</h2><p><a href="https://github.com/cjql/blog/tree/master/themes/iyelee/source/img" target="_blank" rel="noopener">themes\iyelee\source\img</a></p><h2 id="修改头像背景"><a href="#修改头像背景" class="headerlink" title="修改头像背景"></a>修改头像背景</h2><p><a href="https://github.com/cjql/blog/edit/master/themes/iyelee/source/css/_partial/main.styl" target="_blank" rel="noopener">themes\iyelee\source\css_partial\main.styl</a></p><h2 id="标题字体颜色"><a href="#标题字体颜色" class="headerlink" title="标题字体颜色"></a>标题字体颜色</h2><p><a href="https://github.com/cjql/blog/edit/master/themes/iyelee/source/css/_partial/customise/heading.styl" target="_blank" rel="noopener">themes\iyelee\source\css_partial\customise\heading.styl</a><br>似乎会覆盖themes\iyelee\source\css_extend.styl文件</p><h2 id="标题字体大小"><a href="#标题字体大小" class="headerlink" title="标题字体大小"></a>标题字体大小</h2><p><a href="https://github.com/cjql/blog/edit/master/themes/iyelee/source/css/_extend.styl" target="_blank" rel="noopener">themes\iyelee\source\css_extend.styl</a></p><h2 id="主题配置文件"><a href="#主题配置文件" class="headerlink" title="主题配置文件"></a>主题配置文件</h2><p><a href="https://github.com/cjql/blog/edit/master/themes/iyelee/_config.yml" target="_blank" rel="noopener">blog\themes\iyelee_config.yml</a></p><h2 id="站点配置文件"><a href="#站点配置文件" class="headerlink" title="站点配置文件"></a>站点配置文件</h2><p><a href="https://github.com/cjql/blog/edit/master/_config.yml" target="_blank" rel="noopener">blog_config.yml</a></p><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><p>保留以下文件即可。<br><img src="https://upload-images.jianshu.io/upload_images/6908911-fad84d4707cb74aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h1><blockquote><ul><li>检查_config.yml的空格</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 后续学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>三思而后行</title>
      <link href="/%E4%B8%89%E6%80%9D%E8%80%8C%E5%90%8E%E8%A1%8C/"/>
      <url>/%E4%B8%89%E6%80%9D%E8%80%8C%E5%90%8E%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>代码大全之准备工作。<br><a id="more"></a></p><h1 id="必备工具"><a href="#必备工具" class="headerlink" title="必备工具"></a>必备工具</h1><p>在开始建造房子之前,审视：<br>蓝图(包含所有细节信息的设计详图)<br>全部(建筑)许可证<br>测量房屋的地基<br>Caper Jones是 Software Productivity Research(软件生产率研究)的首席科学家,他回顾20年的软件研究,指出他和同事见过不止<br>700种不同的编程语言,<br>40种收集需求的方法、<br>50种进行软件设计的方法、<br>30种针对项目的测试方法( Jones2003)。<br>三种主调的无数变奏：项目类型与典型实践<br>需求、架构、计划、编程、测试、质量保证</p><h1 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h1><p>无论何种项目,都会对“准备工作”进行剪裁,使之符合项目的特定需要;在构建活动开始之前,准备工作要做周全：<br>建造摩天大楼用一种方法,<br>建造普通住宅用另一种方法,<br>建造犬舍用第三种方法。<br><img src="https://upload-images.jianshu.io/upload_images/6908911-845325aae45e6355.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目种类与典型实践"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-5b9431db2a2cfc27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目种类与典型实践"></p><p>高迭代式与序列式<br>性命攸关的系统往往要求采用更加序列式的方法—“需求稳定”是确保“超高等级的可靠性”的必备条件之<br><img src="https://upload-images.jianshu.io/upload_images/6908911-22da391925683288.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="无准备的序列式与迭代式"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-39c48db18b0494d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="有装备的序列式与迭代式"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-e053cbb9582d5047.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="方案选择"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-f4a24687627fef82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="方案选择"><br>Upstream Prerequisites<br>Measure Twice, Cut Once<br>构建活动差不多占整个项目成本的65%。<br>有的软件项目最终会进行两三次(甚至更多)构建。<br>将项目中最昂贵的部分执行两遍,这无论在软件行业还是在其他行业都是愚蠢的主意。</p><h1 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h1><p><strong>问题、需求分析、架构、设计、项目规划、风险防御、因地制宜</strong><br>事先做好计划能减小很多压力，让你的经验（曾经遇到的问题）来引导你吧。<br>创作引人注目的商业案例、<br>分析出全面而准确的需求、<br>创建高质量的架构</p><p>准备工作的中心目标就是降低风险:一个好的项目规划者能够尽可能早地将主要的风险清除掉,以使项目的大部分工作能够尽可能平稳地进行。<br>目前,软件开发中最常见的项目风险是糟糕的需求分析和糟糕的项目计划。<br>因此准备工作就倾向于集中改进需求分析和项目规划。<br>构建活动的准备工作不是一门精密科学,要根据每一个项目的特点来选择特定的降低风险的方法。<br>具体细节随项目的不同,会有非常大的变化。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>一开始就把事情做好是最合算的。<br>客户沟通、捕捉需求、动态需求、设计轮廓<br>需求、架构、设计、程序。<br>架构师吃掉需求,设计师吃掉架构,而程序员则消化设计。程序员是软件食物链的最后一环。<br>在软件开发中,如果需求被污染了,那么它就会污染架构,而架构又会污染构建。这样会导致程序员脾气暴躁、营养失调;开发出的软件具有放射性污染,而且周身都是缺陷。<br>如果你正为某个高度迭代的项目做计划,先弄清哪些是最关键的需求和架构要素（那么在开始构建活动之前,你需要针对将要构造的每一片段,）。</p><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><p>规模、时间、人数、计算机台数</p><h1 id="为什么合适的准备工作是非常重要的"><a href="#为什么合适的准备工作是非常重要的" class="headerlink" title="为什么合适的准备工作是非常重要的"></a>为什么合适的准备工作是非常重要的</h1><p>尽早查找并修正错误<br><img src="https://upload-images.jianshu.io/upload_images/6908911-73bdbfba79a49a39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="缺陷检测成本"></p><h1 id="如何判定“是否已经准备好开始构建工作了”"><a href="#如何判定“是否已经准备好开始构建工作了”" class="headerlink" title="如何判定“是否已经准备好开始构建工作了”"></a>如何判定“是否已经准备好开始构建工作了”</h1><p>定义问题、要求、辨明当时的形势<br>定下解决方案的规格<br>设计解决方案<br>计划</p><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>使用高质量的实践方法是那些能创造高质量软件的程序员的共性。<br>这些高质量的实践方法在项目的初期、中期、末期都强调质量.</p><h2 id="末期"><a href="#末期" class="headerlink" title="末期"></a>末期</h2><p>系统测试。<br>当提到软件质量保证的时候,许多人都会想到测试。但是测试只是完整的质量保证策略的一部分,而且不是最有影响的部分。测试是不可能检查出诸如“制造了一个错误的产品”。<br>“使用错误的方法制造正确的产品”之类的缺陷的。这样的缺陷必须在测试之前解决。更确切地说是在构建活动之前。</p><h2 id="中期"><a href="#中期" class="headerlink" title="中期"></a>中期</h2><p>构建实践。</p><h2 id="初期"><a href="#初期" class="headerlink" title="初期"></a>初期</h2><p>计划、要求并且设计一个高质量的产品。<br>如果你用为 Pontiac Aztek做的设计来开始整个生产过程,那么你可以想尽办法来测试,它也绝对不会变成劳斯莱斯。<br>也许你能造出最好的 Aztek,但如果想要的是一辆劳斯莱斯,那么你就得从头开始做计划。<br>在软件开发中,你也需要在定义问题、定下解决方案的规格,以及设计解决方案的时候做出这种计划。<br>在你开始构建的时候,项目前期工作已经或多或少为这个项目的成功或失败打下了基础。<br>然而,在构建过程中,你至少应该能辨明当时的形势如何,如果你看到失败的乌云已经出现在地平线上时,就退回到项目的前期工作吧。</p><h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><p>ProfessionalSoftware Deve-opment(《专业软件开发〉,Mcconnell 2004第16章描述了项能培养这些技能的专业培养计划。<br>入阅读有关这主题的更多愉快的变奏,请阅Gerald Weinberg的经典著作〈ThePsychology of Co-mputer Programming〉( Weinberg1998)。</p><p>这种现象被称为 WISCA综合症或者WIMP综合症: Why Isn’ t Sam CodingAnything?(为什么Sam不在写代码?)或者 Why Isn’ t Mary Programing?(为什么Mary不在编程?</p>]]></content>
      
      
      
        <tags>
            
            <tag> wiki </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>程序员书单</title>
      <link href="/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B9%A6%E5%8D%95/"/>
      <url>/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B9%A6%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p>程序员的书单。<br><a id="more"></a><br>本科生课程<br><a href="https://upload-images.jianshu.io/upload_images/6908911-bda7cb1bb364d47e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener">本科生课程</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ireadweek</title>
      <link href="/ireadweek/"/>
      <url>/ireadweek/</url>
      
        <content type="html"><![CDATA[<p>自己造的小轮子。<br><a id="more"></a></p><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>多页汇总分页批量获取书名作者和网盘链接<br>输入：网址<br>输出：书名、作者、链接  </p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h1 id="遇到的问题及解决方案"><a href="#遇到的问题及解决方案" class="headerlink" title="遇到的问题及解决方案"></a>遇到的问题及解决方案</h1><table><thead><tr><th>问题描述</th><th>解决方案</th></tr></thead><tbody><tr><td>批量书合成一页还是每本书单独有序号</td><td>很多个人网站每个条目有自己的序号，按序号抓可不重不漏</td></tr><tr><td>正则表达式的引号问题</td><td>转义</td></tr><tr><td>网页可能不存在</td><td>try、except</td></tr><tr><td>匹配结果为0的情况</td><td>try、except</td></tr><tr><td>编译器vscode跑太慢</td><td>换回python自带IDLE，快很多</td></tr><tr><td>为啥跑着跑着就停了</td><td></td></tr></tbody></table><h1 id="待改进的地方"><a href="#待改进的地方" class="headerlink" title="待改进的地方"></a>待改进的地方</h1><h1 id="风险"><a href="#风险" class="headerlink" title="风险"></a>风险</h1><p>一级风险：原网站换<br>五级风险：原作者取消网盘链接</p>]]></content>
      
      
      
        <tags>
            
            <tag> achieve </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>精通Python爬虫框架Scrapy</title>
      <link href="/%E7%B2%BE%E9%80%9Apython%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6scrapy/"/>
      <url>/%E7%B2%BE%E9%80%9Apython%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6scrapy/</url>
      
        <content type="html"><![CDATA[<p>豆瓣书目<br><a id="more"></a><br>目录<br>第 1章 Scrapy简介 1<br>1.1 初识Scrapy 1<br>1.2 喜欢Scrapy的更多理由 2<br>1.3 关于本书：目标和用途 3<br>1.4 掌握自动化数据爬取的重要性 4<br>1.4.1 开发健壮且高质量的应用，并提供合理规划 4<br>1.4.2 快速开发高质量可行产品 5<br>1.4.3 Google不会使用表单，爬取才能扩大规模 6<br>1.4.4 发现并融入你的生态系统 7<br>1.5 在充满爬虫的世界里做一个好公民 7<br>1.6 Scrapy不是什么 8<br>1.7 本章小结 9<br>第 2章 理解HTML和XPath 10<br>2.1 HTML、DOM树表示以及XPath 10<br>2.1.1 URL 11<br>2.1.2 HTML文档 11<br>2.1.3 树表示法 13<br>2.1.4 你会在屏幕上看到什么 14<br>2.2 使用XPath选择HTML元素 15<br>2.2.1 有用的XPath表达式 16<br>2.2.2 使用Chrome获取XPath表达式 19<br>2.2.3 常见任务示例 20<br>2.2.4 预见变化 21<br>2.3 本章小结 22<br>第3章 爬虫基础 23<br>3.1 安装Scrapy 24<br>3.1.1 MacOS 24<br>3.1.2 Windows 25<br>3.1.3 Linux 25<br>3.1.4 新源码安装 26<br>3.1.5 升级Scrapy 26<br>3.1.6 Vagrant：本书中运行示例的官方方式 27<br>3.2 UR2IM——基本抓取流程 28<br>3.2.1 URL 29<br>3.2.2 请求和响应 31<br>3.2.3 Item 31<br>3.3 一个Scrapy项目 37<br>3.3.1 声明item 38<br>3.3.2 编写爬虫 40<br>3.3.3 填充item 43<br>3.3.4 保存文件 45<br>3.3.5 清理——item装载器与管理字段 47<br>3.3.6 创建contract 50<br>3.4 抽取更多的URL 53<br>3.4.1 使用爬虫实现双向爬取 56<br>3.4.2 使用CrawlSpider实现双向爬取 59<br>3.5 本章小结 61<br>第4章 从Scrapy到移动应用 62<br>4.1 选择手机应用框架 62<br>4.2 创建数据库和集合 63<br>4.3 使用Scrapy填充数据库 65<br>4.4 创建手机应用 68<br>4.4.1 创建数据库访问服务 69<br>4.4.2 创建用户界面 69<br>4.4.3 将数据映射到用户界面 70<br>4.4.4 数据库字段与用户界面控件间映射 71<br>4.4.5 测试、分享及导出你的手机应用 72<br>4.5 本章小结 73<br>第5章 迅速的爬虫技巧 75<br>5.1 需要登录的爬虫 75<br>5.2 使用JSON API和AJAX页面的爬虫 81<br>5.3 30倍速的房产爬虫 85<br>5.4 基于Excel文件爬取的爬虫 90<br>5.5 本章小结 93<br>第6章 部署到Scrapinghub 94<br>6.1 注册、登录及创建项目 94<br>6.2 部署爬虫与计划运行 96<br>6.3 访问item 99<br>6.4 计划定时爬取 100<br>6.5 本章小结 101<br>第7章 配置与管理 102<br>7.1 使用Scrapy设置 102<br>7.2 基本设置 103<br>7.2.1 分析 104<br>7.2.2 性能 107<br>7.2.3 提前终止爬取 108<br>7.2.4 HTTP缓存和离线运行 108<br>7.2.5 爬取风格 109<br>7.2.6 feed 110<br>7.2.7 媒体下载 111<br>7.2.8 Amazon Web服务 113<br>7.2.9 使用代理和爬虫 113<br>7.3 进阶设置 114<br>7.3.1 项目相关设置 115<br>7.3.2 Scrapy扩展设置 116<br>7.3.3 下载调优 116<br>7.3.4 自动限速扩展设置 117<br>7.3.5 内存使用扩展设置 117<br>7.3.6 日志和调试 117<br>7.4 本章小结 118<br>第8章 Scrapy编程 119<br>8.1 Scrapy是一个Twisted应用 119<br>8.1.1 延迟和延迟链 122<br>8.1.2 理解Twisted和非阻塞I/O——一个Python故事 125<br>8.2 Scrapy架构概述 132<br>8.3 示例1：非常简单的管道 135<br>8.4 信号 136<br>8.5 示例2：测量吞吐量和延时的扩展 138<br>8.6 中间件延伸 141<br>8.7 本章小结 144<br>第9章 管道秘诀 145<br>9.1 使用REST API 146<br>9.1.1 使用treq 146<br>9.1.2 用于写入Elasticsearch的管道 146<br>9.1.3 使用Google Geocoding API实现地理编码的管道 149<br>9.1.4 在Elasticsearch中启用地理编码索引 156<br>9.2 与标准Python客户端建立数据库接口 157<br>9.3 使用Twisted专用客户端建立服务接口 161<br>9.4 为CPU密集型、阻塞或遗留功能建立接口 166<br>9.4.1 处理CPU密集型或阻塞操作的管道 166<br>9.4.2 使用二进制或脚本的管道 168<br>9.5 本章小结 172<br>第 10章 理解Scrapy性能 173<br>10.1 Scrapy引擎——一种直观方式 173<br>10.1.1 级联队列系统 175<br>10.1.2 定义瓶颈 176<br>10.1.3 Scrapy性能模型 176<br>10.2 使用telnet获得组件利用率 178<br>10.3 基准系统 180<br>10.4 标准性能模型 182<br>10.5 解决性能问题 185<br>10.5.1 案例 #1：CPU饱和 185<br>10.5.2 案例 #2：代码阻塞 187<br>10.5.3 案例 #3：下载器中的“垃圾” 188<br>10.5.4 案例 #4：大量响应或超长响应造成的溢出 191<br>10.5.5 案例 #5：有限/过度item并发造成的溢出 193<br>10.5.6 案例 #6：下载器未充分利用 194<br>10.6 故障排除流程 197<br>10.7 本章小结 198<br>第 11章 使用Scrapyd与实时分析进行分布式爬取 199<br>11.1 房产的标题是如何影响价格的 200<br>11.2 Scrapyd 200<br>11.3 分布式系统概述 203<br>11.4 爬虫和中间件的变化 205<br>11.4.1 索引页分片爬取 205<br>11.4.2 分批爬取URL 207<br>11.4.3 从设置中获取初始URL 211<br>11.4.4 在Scrapyd服务器中部署项目 213<br>11.5 创建自定义监控命令 215<br>11.6 使用Apache Spark流计算偏移量 216<br>11.7 运行分布式爬取 218<br>11.8 系统性能 220<br>11.9 关键要点 221<br>11.10 本章小结 221<br>附录A 软件的安装与故障排除 222</p>]]></content>
      
      
      
        <tags>
            
            <tag> menu </tag>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>精通Python网络爬虫：核心技术、框架与项目实战</title>
      <link href="/%E7%B2%BE%E9%80%9APython%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%EF%BC%9A%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%81%E6%A1%86%E6%9E%B6%E4%B8%8E%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
      <url>/%E7%B2%BE%E9%80%9APython%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%EF%BC%9A%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%81%E6%A1%86%E6%9E%B6%E4%B8%8E%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>豆瓣书目<br><a id="more"></a><br>目录<br>前言<br>第一篇　理论基础篇<br>第1章　什么是网络爬虫 3<br>1.1　初识网络爬虫 3<br>1.2　为什么要学网络爬虫 4<br>1.3　网络爬虫的组成 5<br>1.4　网络爬虫的类型 6<br>1.5　爬虫扩展——聚焦爬虫 7<br>1.6　小结 8<br>第2章　网络爬虫技能总览 9<br>2.1　网络爬虫技能总览图 9<br>2.2　搜索引擎核心 10<br>2.3　用户爬虫的那些事儿 11<br>2.4　小结 12<br>第二篇　核心技术篇<br>第3章　网络爬虫实现原理与实现技术 15<br>3.1　网络爬虫实现原理详解 15<br>3.2　爬行策略 17<br>3.3　网页更新策略 18<br>3.4　网页分析算法 20<br>3.5　身份识别 21<br>3.6　网络爬虫实现技术 21<br>3.7　实例——metaseeker 22<br>3.8　小结 27<br>第4章　Urllib库与URLError异常处理 29<br>4.1　什么是Urllib库 29<br>4.2　快速使用Urllib爬取网页 30<br>4.3　浏览器的模拟——Headers属性 34<br>4.4　超时设置 37<br>4.5　HTTP协议请求实战 39<br>4.6　代理服务器的设置 44<br>4.7　DebugLog实战 45<br>4.8　异常处理神器——URLError实战 46<br>4.9　小结 51<br>第5章　正则表达式与Cookie的使用 52<br>5.1　什么是正则表达式 52<br>5.2　正则表达式基础知识 52<br>5.3　正则表达式常见函数 61<br>5.4　常见实例解析 64<br>5.5　什么是Cookie 66<br>5.6　Cookiejar实战精析 66<br>5.7　小结 71<br>第6章　手写Python爬虫 73<br>6.1　图片爬虫实战 73<br>6.2　链接爬虫实战 78<br>6.3　糗事百科爬虫实战 80<br>6.4　微信爬虫实战 82<br>6.5　什么是多线程爬虫 89<br>6.6　多线程爬虫实战 90<br>6.7　小结 98<br>第7章　学会使用Fiddler 99<br>7.1　什么是Fiddler 99<br>7.2　爬虫与Fiddler的关系 100<br>7.3　Fiddler的基本原理与基本界面 100<br>7.4　Fiddler捕获会话功能 102<br>7.5　使用QuickExec命令行 104<br>7.6　Fiddler断点功能 106<br>7.7　Fiddler会话查找功能 111<br>7.8　Fiddler的其他功能 111<br>7.9　小结 113<br>第8章　爬虫的浏览器伪装技术 114<br>8.1　什么是浏览器伪装技术 114<br>8.2　浏览器伪装技术准备工作 115<br>8.3　爬虫的浏览器伪装技术实战 117<br>8.4　小结 121<br>第9章　爬虫的定向爬取技术 122<br>9.1　什么是爬虫的定向爬取技术 122<br>9.2　定向爬取的相关步骤与策略 123<br>9.3　定向爬取实战 124<br>9.4　小结 130<br>第三篇　框架实现篇<br>第10章　了解Python爬虫框架 133<br>10.1　什么是Python爬虫框架 133<br>10.2　常见的Python爬虫框架 133<br>10.3　认识Scrapy框架 134<br>10.4　认识Crawley框架 135<br>10.5　认识Portia框架 136<br>10.6　认识newspaper框架 138<br>10.7　认识Python-goose框架 139<br>10.8　小结 140<br>第11章　爬虫利器——Scrapy安装与配置 141<br>11.1　在Windows7下安装及配置Scrapy实战详解 141<br>11.2　在Linux（Centos）下安装及配置Scrapy实战详解 147<br>11.3　在MAC下安装及配置Scrapy实战详解 158<br>11.4　小结 161<br>第12章　开启Scrapy爬虫项目之旅 162<br>12.1　认识Scrapy项目的目录结构 162<br>12.2　用Scrapy进行爬虫项目管理 163<br>12.3　常用工具命令 166<br>12.4　实战：Items的编写 181<br>12.5　实战：Spider的编写 183<br>12.6　XPath基础 187<br>12.7　Spider类参数传递 188<br>12.8　用XMLFeedSpider来分析XML源 191<br>12.9　学会使用CSVFeedSpider 197<br>12.10　Scrapy爬虫多开技能 200<br>12.11　避免被禁止 206<br>12.12　小结 212<br>第13章　Scrapy核心架构 214<br>13.1　初识Scrapy架构 214<br>13.2　常用的Scrapy组件详解 215<br>13.3　Scrapy工作流 217<br>13.4　小结 219<br>第14章　Scrapy中文输出与存储 220<br>14.1　Scrapy的中文输出 220<br>14.2　Scrapy的中文存储 223<br>14.3　输出中文到JSON文件 225<br>14.4　小结 230<br>第15章　编写自动爬取网页的爬虫 231<br>15.1　实战：items的编写 231<br>15.2　实战：pipelines的编写 233<br>15.3　实战：settings的编写 234<br>15.4　自动爬虫编写实战 234<br>15.5　调试与运行 239<br>15.6　小结 242<br>第16章　CrawlSpider 243<br>16.1　初识CrawlSpider 243<br>16.2　链接提取器 244<br>16.3　实战：CrawlSpider实例 245<br>16.4　小结 249<br>第17章　Scrapy高级应用 250<br>17.1　如何在Python3中操作数据库 250<br>17.2　爬取内容写进MySQL 254<br>17.3　小结 259<br>第四篇　项目实战篇<br>第18章　博客类爬虫项目 263<br>18.1　博客类爬虫项目功能分析 263<br>18.2　博客类爬虫项目实现思路 264<br>18.3　博客类爬虫项目编写实战 264<br>18.4　调试与运行 274<br>18.5　小结 275<br>第19章　图片类爬虫项目 276<br>19.1　图片类爬虫项目功能分析 276<br>19.2　图片类爬虫项目实现思路 277<br>19.3　图片类爬虫项目编写实战 277<br>19.4　调试与运行 281<br>19.5　小结 282<br>第20章　模拟登录爬虫项目 283<br>20.1　模拟登录爬虫项目功能分析 283<br>20.2　模拟登录爬虫项目实现思路 283<br>20.3　模拟登录爬虫项目编写实战 284<br>20.4　调试与运行 292<br>20.5　小结 294</p>]]></content>
      
      
      
        <tags>
            
            <tag> menu </tag>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python网络爬虫实战</title>
      <link href="/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/"/>
      <url>/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>豆瓣书目<br><a id="more"></a><br>目 录<br>第1章 Python环境配置 1<br>1.1Python简介 1<br>1.1.1Python的历史由来 1<br>1.1.2Python的现状 2<br>1.1.3Python的应用 2<br>1.2Python开发环境配置 4<br>1.2.1Windows下安装Python 4<br>1.2.2Windows下安装配置pip 9<br>1.2.3Linux下安装Python 10<br>1.2.4Linux下安装配置pip 12<br>1.2.5永远的开始：hello world 15<br>1.3 本章小结 20<br>第2章 Python基础 21<br>2.1Python变量类型 21<br>2.1.1数字 21<br>2.1.2字符串 24<br>2.1.3列表 28<br>2.1.4元组 34<br>2.1.5字典 36<br>2.2Python语句 40<br>2.2.1条件语句——if else 40<br>2.2.2有限循环——for 41<br>2.2.3无限循环——while 43<br>2.2.4中断循环——continue、break 45<br>2.2.5异常处理——try except 47<br>2.2.6导入模块——import 49<br>2.3 函数和类 53<br>2.3.1函数 53<br>2.3.2类 59<br>2.4Python代码格式 65<br>2.4.1Python代码缩进 65<br>2.4.2Python命名规则 66<br>2.4.3Python代码注释 68<br>2.5Python调试 70<br>2.5.1Windows下IDLE调试 70<br>2.5.2Linux下pdb调试 73<br>2.6 本章小结 77<br>第3章 简单的Python脚本 78<br>3.1 九九乘法表 78<br>3.1.1Project分析 78<br>3.1.2Project实施 78<br>3.2 斐波那契数列 80<br>3.2.1Project分析 80<br>3.2.2Project实施 80<br>3.3 概率计算 81<br>3.3.1Project分析 81<br>3.3.2Project实施 82<br>3.4 读写文件 83<br>3.4.1Project分析 83<br>3.4.2project实施 84<br>3.5 本章小结 85<br>第4章 Python爬虫常用模块 86<br>4.1Python标准库之urllib2模块 86<br>4.1.1urllib2请求返回网页 86<br>4.1.2urllib2使用代理访问网页 88<br>4.1.3urllib2修改header 91<br>4.2Python标准库——logging模块 95<br>4.2.1简述logging模块 95<br>4.2.2自定义模块myLog 99<br>4.3 其他有用模块 102<br>4.3.1re模块（正则表达式操作） 102<br>4.3.2sys模块（系统参数获取） 105<br>4.3.3time模块（获取时间信息） 106<br>4.4 本章小结 110<br>第5章 Scrapy爬虫框架 111<br>5.1 安装Scrapy 111<br>5.1.1Windows下安装Scrapy环境 111<br>5.1.2Linux下安装Scrapy 112<br>5.1.3vim编辑器 113<br>5.2Scrapy选择器XPath和CSS 114<br>5.2.1XPath选择器 114<br>5.2.2CSS选择器 117<br>5.2.3其他选择器 118<br>5.3Scrapy爬虫实战一：今日影视 118<br>5.3.1创建Scrapy项目 119<br>5.3.2Scrapy文件介绍 120<br>5.3.3Scrapy爬虫编写 123<br>5.4Scrapy爬虫实战二：天气预报 129<br>5.4.1项目准备 130<br>5.4.2创建编辑Scrapy爬虫 131<br>5.4.3数据存储到json 138<br>5.4.4数据存储到MySQL 140<br>5.5Scrapy爬虫实战三：获取代理 146<br>5.5.1项目准备 146<br>5.5.2创建编辑Scrapy爬虫 147<br>5.5.3多个Spider 153<br>5.5.4处理Spider数据 157<br>5.6Scrapy爬虫实战四：糗事百科 159<br>5.6.1目标分析 159<br>5.6.2创建编辑Scrapy爬虫 160<br>5.6.3Scrapy项目中间件——添加headers 161<br>5.6.4Scrapy项目中间件——添加proxy 165<br>5.7scrapy爬虫实战五：爬虫攻防 167<br>5.7.1创建一般爬虫 167<br>5.7.2封锁间隔时间破解 171<br>5.7.3封锁Cookies破解 171<br>5.7.4封锁user-agent破解 171<br>5.7.5封锁IP破解 174<br>5.8 本章小结 177<br>第6章 Beautiful Soup爬虫 178<br>6.1 安装BeautifulSoup环境 178<br>6.1.1Windows下安装Beautiful Soup 178<br>6.1.2Linux下安装Beautiful Soup 179<br>6.1.3最强大的IDE——Eclipse 179<br>6.2BeautifulSoup解析器 188<br>6.2.1bs4解析器选择 188<br>6.2.2lxml解析器安装 189<br>6.2.3使用bs4过滤器 190<br>6.3bs4爬虫实战一：获取百度贴吧内容 196<br>6.3.1目标分析 196<br>6.3.2项目实施 197<br>6.3.3代码分析 205<br>6.3.4Eclipse调试 206<br>6.4bs4爬虫实战二：获取双色球中奖信息 207<br>6.4.1目标分析 207<br>6.4.2项目实施 210<br>6.4.3保存结果到Excel 214<br>6.4.4代码分析 221<br>6.5bs4爬虫实战三：获取起点小说信息 221<br>6.5.1目标分析 222<br>6.5.2项目实施 223<br>6.5.3保存结果到MySQL 226<br>6.5.4代码分析 230<br>6.6bs4爬虫实战四：获取电影信息 230<br>6.6.1目标分析 230<br>6.6.2项目实施 232<br>6.6.3bs4反爬虫 235<br>6.6.4代码分析 237<br>6.7bs4爬虫实战五：获取音悦台榜单 238<br>6.7.1目标分析 238<br>6.7.2项目实施 239<br>6.7.3代码分析 244<br>6.8 本章小结 245<br>第7章 Mechanize模拟浏览器 246<br>7.1 安装Mechanize模块 246<br>7.1.1Windows下安装Mechanize 246<br>7.1.2Linux下安装Mechanize 247<br>7.2Mechanize 测试 248<br>7.2.1Mechanize百度 248<br>7.2.2Mechanize光猫F460 251<br>7.3Mechanize实站一：获取Modem信息 254<br>7.3.1获取F460数据 254<br>7.3.2代码分析 257<br>7.4Mechanize实战二：获取音悦台公告 258<br>7.4.1登录原理 258<br>7.4.2获取Cookie的方法 259<br>7.4.3获取Cookie 262<br>7.4.4使用Cookie登录获取数据 266<br>7.5 本章总结 270<br>第8章 Selenium模拟浏览器 271<br>8.1 安装Selenium模块 271<br>8.1.1Windows下安装Selenium模块 271<br>8.1.2Linux下安装Selenium模块 272<br>8.2 浏览器选择 272<br>8.2.1Webdriver支持列表 272<br>8.2.2Windows下安装PhantomJS 273<br>8.2.3Linux下安装PhantomJS 276<br>8.3Selenium&amp;PhantomJS抓取数据 277<br>8.3.1获取百度搜索结果 277<br>8.3.2获取搜索结果 280<br>8.3.3获取有效数据位置 282<br>8.3.4从位置中获取有效数据 284<br>8.4Selenium&amp;PhantomJS实战一：获取代理 285<br>8.4.1准备环境 285<br>8.4.2爬虫代码 287<br>8.4.3代码解释 289<br>8.5Selenium&amp;PhantomJS实战二：漫画爬虫 289<br>8.5.1准备环境 290<br>8.5.2爬虫代码 291<br>8.5.3代码解释 294<br>8.6 本章总结 294</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Python爬虫开发与项目实战</title>
      <link href="/Python%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E4%B8%8E%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
      <url>/Python%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E4%B8%8E%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>豆瓣书目。</p><a id="more"></a><p>目 录</p><p>前言<br>基础篇<br>第1章　回顾Python编程    2<br>1.1　安装Python    2<br>1.1.1　Windows上安装Python    2<br>1.1.2　Ubuntu上的Python    3<br>1.2　搭建开发环境    4<br>1.2.1　Eclipse+PyDev    4<br>1.2.2　PyCharm    10<br>1.3　IO编程    11<br>1.3.1　文件读写    11<br>1.3.2　操作文件和目录    14<br>1.3.3　序列化操作    15<br>1.4　进程和线程    16<br>1.4.1　多进程    16<br>1.4.2　多线程    22<br>1.4.3　协程    25<br>1.4.4　分布式进程    27<br>1.5　网络编程    32<br>1.5.1　TCP编程    33<br>1.5.2　UDP编程    35<br>1.6　小结    36<br>第2章　Web前端基础    37<br>2.1　W3C标准    37<br>2.1.1　HTML    37<br>2.1.2　CSS    47<br>2.1.3　JavaScript    51<br>2.1.4　XPath    56<br>2.1.5　JSON    61<br>2.2　HTTP标准    61<br>2.2.1　HTTP请求过程    62<br>2.2.2　HTTP状态码含义    62<br>2.2.3　HTTP头部信息    63<br>2.2.4　Cookie状态管理    66<br>2.2.5　HTTP请求方式    66<br>2.3　小结    68<br>第3章　初识网络爬虫    69<br>3.1　网络爬虫概述    69<br>3.1.1　网络爬虫及其应用    69<br>3.1.2　网络爬虫结构    71<br>3.2　HTTP请求的Python实现    72<br>3.2.1　urllib2/urllib实现    72<br>3.2.2　httplib/urllib实现    76<br>3.2.3　更人性化的Requests    77<br>3.3　小结    82<br>第4章　HTML解析大法    83<br>4.1　初识Firebug    83<br>4.1.1　安装Firebug    84<br>4.1.2　强大的功能    84<br>4.2　正则表达式    95<br>4.2.1　基本语法与使用    96<br>4.2.2　Python与正则    102<br>4.3　强大的BeautifulSoup    108<br>4.3.1　安装BeautifulSoup    108<br>4.3.2　BeautifulSoup的使用    109<br>4.3.3　lxml的XPath解析    124<br>4.4　小结    126<br>第5章　数据存储（无数据库版）    127<br>5.1　HTML正文抽取    127<br>5.1.1　存储为JSON    127<br>5.1.2　存储为CSV    132<br>5.2　多媒体文件抽取    136<br>5.3　Email提醒    137<br>5.4　小结    138<br>第6章　实战项目：基础爬虫    139<br>6.1　基础爬虫架构及运行流程    140<br>6.2　URL管理器    141<br>6.3　HTML下载器    142<br>6.4　HTML解析器    143<br>6.5　数据存储器    145<br>6.6　爬虫调度器    146<br>6.7　小结    147<br>第7章　实战项目：简单分布式爬虫    148<br>7.1　简单分布式爬虫结构    148<br>7.2　控制节点    149<br>7.2.1　URL管理器    149<br>7.2.2　数据存储器    151<br>7.2.3　控制调度器    153<br>7.3　爬虫节点    155<br>7.3.1　HTML下载器    155<br>7.3.2　HTML解析器    156<br>7.3.3　爬虫调度器    157<br>7.4　小结    159<br>中级篇<br>第8章　数据存储（数据库版）    162<br>8.1　SQLite    162<br>8.1.1　安装SQLite    162<br>8.1.2　SQL语法    163<br>8.1.3　SQLite增删改查    168<br>8.1.4　SQLite事务    170<br>8.1.5　Python操作SQLite    171<br>8.2　MySQL    174<br>8.2.1　安装MySQL    174<br>8.2.2　MySQL基础    177<br>8.2.3　Python操作MySQL    181<br>8.3　更适合爬虫的MongoDB    183<br>8.3.1　安装MongoDB    184<br>8.3.2　MongoDB基础    187<br>8.3.3　Python操作MongoDB    194<br>8.4　小结    196<br>第9章　动态网站抓取    197<br>9.1　Ajax和动态HTML    197<br>9.2　动态爬虫1：爬取影评信息    198<br>9.3　PhantomJS    207<br>9.3.1　安装PhantomJS    207<br>9.3.2　快速入门    208<br>9.3.3　屏幕捕获    211<br>9.3.4　网络监控    213<br>9.3.5　页面自动化    214<br>9.3.6　常用模块和方法    215<br>9.4　Selenium    218<br>9.4.1　安装Selenium    219<br>9.4.2　快速入门    220<br>9.4.3　元素选取    221<br>9.4.4　页面操作    222<br>9.4.5　等待    225<br>9.5　动态爬虫2：爬取去哪网    227<br>9.6　小结    230<br>第10章　Web端协议分析    231<br>10.1　网页登录POST分析    231<br>10.1.1　隐藏表单分析    231<br>10.1.2　加密数据分析    234<br>10.2　验证码问题    246<br>10.2.1　IP代理    246<br>10.2.2　Cookie登录    249<br>10.2.3　传统验证码识别    250<br>10.2.4　人工打码    251<br>10.2.5　滑动验证码    252<br>10.3　www]m]wap    252<br>10.4　小结    254<br>第11章　终端协议分析    255<br>11.1　PC客户端抓包分析    255<br>11.1.1　HTTP Analyzer简介    255<br>11.1.2　虾米音乐PC端API实战分析    257<br>11.2　App抓包分析    259<br>11.2.1　Wireshark简介    259<br>11.2.2　酷我听书App端API实战分析    266<br>11.3　API爬虫：爬取mp3资源信息    268<br>11.4　小结    272<br>第12章　初窥Scrapy爬虫框架    273<br>12.1　Scrapy爬虫架构    273<br>12.2　安装Scrapy    275<br>12.3　创建cnblogs项目    276<br>12.4　创建爬虫模块    277<br>12.5　选择器    278<br>12.5.1　Selector的用法    278<br>12.5.2　HTML解析实现    280<br>12.6　命令行工具    282<br>12.7　定义Item    284<br>12.8　翻页功能    286<br>12.9　构建Item Pipeline    287<br>12.9.1　定制Item Pipeline    287<br>12.9.2　激活Item Pipeline    288<br>12.10　内置数据存储    288<br>12.11　内置图片和文件下载方式    289<br>12.12　启动爬虫    294<br>12.13　强化爬虫    297<br>12.13.1　调试方法    297<br>12.13.2　异常    299<br>12.13.3　控制运行状态    300<br>12.14　小结    301<br>第13章　深入Scrapy爬虫框架    302<br>13.1　再看Spider    302<br>13.2　Item Loader    308<br>13.2.1　Item与Item Loader    308<br>13.2.2　输入与输出处理器    309<br>13.2.3　Item Loader Context    310<br>13.2.4　重用和扩展Item Loader    311<br>13.2.5　内置的处理器    312<br>13.3　再看Item Pipeline    314<br>13.4　请求与响应    315<br>13.4.1　Request对象    315<br>13.4.2　Response对象    318<br>13.5　下载器中间件    320<br>13.5.1　激活下载器中间件    320<br>13.5.2　编写下载器中间件    321<br>13.6　Spider中间件    324<br>13.6.1　激活Spider中间件    324<br>13.6.2　编写Spider中间件    325<br>13.7　扩展    327<br>13.7.1　配置扩展    327<br>13.7.2　定制扩展    328<br>13.7.3　内置扩展    332<br>13.8　突破反爬虫    332<br>13.8.1　UserAgent池    333<br>13.8.2　禁用Cookies    333<br>13.8.3　设置下载延时与自动限速    333<br>13.8.4　代理IP池    334<br>13.8.5　Tor代理    334<br>13.8.6　分布式下载器:Crawlera    337<br>13.8.7　Google cache    338<br>13.9　小结    339<br>第14章　实战项目：Scrapy爬虫    340<br>14.1　创建知乎爬虫    340<br>14.2　定义Item    342<br>14.3　创建爬虫模块    343<br>14.3.1　登录知乎    343<br>14.3.2　解析功能    345<br>14.4　Pipeline    351<br>14.5　优化措施    352<br>14.6　部署爬虫    353<br>14.6.1　Scrapyd    354<br>14.6.2　Scrapyd-client    356<br>14.7　小结    357<br>深入篇<br>第15章　增量式爬虫    360<br>15.1　去重方案    360<br>15.2　BloomFilter算法    361<br>15.2.1　BloomFilter原理    361<br>15.2.2　Python实现BloomFilter    363<br>15.3　Scrapy和BloomFilter    364<br>15.4　小结    366<br>第16章　分布式爬虫与Scrapy    367<br>16.1　Redis基础    367<br>16.1.1　Redis简介    367<br>16.1.2　Redis的安装和配置    368<br>16.1.3　Redis数据类型与操作    372<br>16.2　Python和Redis    375<br>16.2.1　Python操作Redis    375<br>16.2.2　Scrapy集成Redis    384<br>16.3　MongoDB集群    385<br>16.4　小结    390<br>第17章　实战项目：Scrapy分布式爬虫    391<br>17.1　创建云起书院爬虫    391<br>17.2　定义Item    393<br>17.3　编写爬虫模块    394<br>17.4　Pipeline    395<br>17.5　应对反爬虫机制    397<br>17.6　去重优化    400<br>17.7　小结    401<br>第18章　人性化PySpider爬虫框架    403<br>18.1　PySpider与Scrapy    403<br>18.2　安装PySpider    404<br>18.3　创建豆瓣爬虫    405<br>18.4　选择器    409<br>18.4.1　PyQuery的用法    409<br>18.4.2　解析数据    411<br>18.5　Ajax和HTTP请求    415<br>18.5.1　Ajax爬取    415<br>18.5.2　HTTP请求实现    417<br>18.6　PySpider和PhantomJS    417<br>18.6.1　使用PhantomJS    418<br>18.6.2　运行JavaScript    420<br>18.7　数据存储    420<br>18.8　PySpider爬虫架构    422<br>18.9　小结    423</p>]]></content>
      
      
      
        <tags>
            
            <tag> menu </tag>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>从零开始学Python网络爬虫</title>
      <link href="/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
      <url>/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<p>豆瓣书目<br><a id="more"></a><br>第1章 Python零基础语法入门 1<br>1.1 Python与PyCharm安装 1<br>1.1.1 Python安装（Windows、Mac和Linux） 1<br>1.1.2 PyCharm安装 3<br>1.2 变量和字符串 3<br>1.2.1 变量 4<br>1.2.2 字符串的“加法”和“乘法” 4<br>1.2.3 字符串的切片和索引 5<br>1.2.4 字符串方法 5<br>1.3 函数与控制语句 7<br>1.3.1 函数 7<br>1.3.2 判断语句 8<br>1.3.3 循环语句 8<br>1.4 Python数据结构 9<br>1.4.1 列表 9<br>1.4.2 字典 11<br>1.4.3 元组和集合 11<br>1.5 Python文件操作 11<br>1.5.1 打开文件 11<br>1.5.2 读写文件 12<br>1.5.3 关闭文件 13<br>1.6 Python面向对象 13<br>1.6.1 定义类 14<br>1.6.2 实例属性 14<br>1.6.3 实例方法 15<br>1.6.4 类的继承 16<br>第2章 爬虫原理和网页构造 17<br>2.1 爬虫原理 17<br>2.1.1 网络连接 17<br>2.1.2 爬虫原理 18<br>2.2 网页构造 21<br>2.2.1 Chrome浏览器的安装 21<br>2.2.2 网页构造 22<br>2.2.3 查询网页信息 23<br>第3章 我的第一个爬虫程序 26<br>3.1 Python第三方库 26<br>3.1.1 Python第三方库的概念 26<br>3.1.2 Python第三方库的安装方法 27<br>3.1.3 Python第三方库的使用方法 29<br>3.2 爬虫三大库 30<br>3.2.1 Requests库 30<br>3.2.2 BeautifulSoup库 32<br>3.2.3 Lxml库 36<br>3.3 综合案例1——爬取北京地区短租房信息 37<br>3.3.1 爬虫思路分析 37<br>3.3.2 爬虫代码及分析 38<br>3.4 综合案例2——爬取酷狗TOP500的数据 41<br>3.4.1 爬虫思路分析 41<br>3.4.2 爬虫代码及分析 43<br>第4章 正则表达式 45<br>4.1 正则表达式常用符号 45<br>4.1.1 一般字符 45<br>4.1.2 预定义字符集 46<br>4.1.3 数量词 46<br>4.1.4 边界匹配 47<br>4.2 re模块及其方法 48<br>4.2.1 search()函数 48<br>4.2.2 sub()函数 49<br>4.2.3 findall()函数 49<br>4.2.4 re模块修饰符 51<br>4.3 综合案例1——爬取《斗破苍穹》全文小说 53<br>4.3.1 爬虫思路分析 53<br>4.3.2 爬虫代码及分析 55<br>4.4 综合案例2——爬取糗事百科网的段子信息 56<br>4.4.1 爬虫思路分析 56<br>4.4.2 爬虫代码及分析 58<br>第5章 Lxml库与Xpath语法 63<br>5.1 Lxml库的安装与使用方法 63<br>5.1.1 Lxml库的安装（Mac、Linux） 63<br>5.1.2 Lxml库的使用 64<br>5.2 Xpath语法 68<br>5.2.1 节点关系 68<br>5.2.2 节点选择 70<br>5.2.3 使用技巧 70<br>5.2.4 性能对比 74<br>5.3 综合案例1——爬取豆瓣网图书TOP250的数据 77<br>5.3.1 将数据存储到CSV文件中 77<br>5.3.2 爬虫思路分析 78<br>5.3.3 爬虫代码及分析 80<br>5.4 综合案例2——爬取起点中文网小说信息 83<br>5.4.1 将数据存储到Excel文件中 83<br>5.4.2 爬虫思路分析 84<br>5.4.3 爬虫代码及分析 86<br>第6章 使用API 88<br>6.1 API的使用 88<br>6.1.1 API概述 88<br>6.1.2 API使用方法 89<br>6.1.3 API验证 91<br>6.2 解析JSON数据 93<br>6.2.1 JSON解析库 93<br>6.2.2 斯必克API调用 94<br>6.2.3 百度地图API调用 96<br>6.3 综合案例1——爬取PEXELS图片 98<br>6.3.1 图片爬取方法 98<br>6.3.2 爬虫思路分析 99<br>6.3.3 爬虫代码及分析 100<br>6.4 综合案例2——爬取糗事百科网的用户地址信息 102<br>6.4.1 地图的绘制 102<br>6.4.2 爬取思路分析 105<br>6.4.3 爬虫代码及分析 106<br>第7章 数据库存储 109<br>7.1 MongoDB数据库 109<br>7.1.1 NoSQL概述 109<br>7.1.2 MongoDB的安装 109<br>7.1.3 MongoDB的使用 115<br>7.2 MySQL数据库 117<br>7.2.1 关系型数据库概述 117<br>7.2.2 MySQL的安装 117<br>7.2.3 MySQL的使用 123<br>7.3 综合案例1——爬取豆瓣音乐TOP250的数据 126<br>7.3.1 爬虫思路分析 126<br>7.3.2 爬虫代码及分析 127<br>7.4 综合案例2——爬取豆瓣电影TOP250的数据 132<br>7.4.1 爬虫思路分析 132<br>7.4.2 爬虫代码及分析 133<br>第8章 多进程爬虫 139<br>8.1 多线程与多进程 139<br>8.1.1 多线程和多进程概述 139<br>8.1.2 多进程使用方法 140<br>8.1.3 性能对比 140<br>8.2 综合案例1——爬取简书网热评文章 143<br>8.2.1 爬虫思路分析 143<br>8.2.2 爬虫代码及分析 147<br>8.3 综合案例2——爬取转转网二手市场商品信息 150<br>8.3.1 爬虫思路分析 150<br>8.3.2 爬虫代码及分析 152<br>第9章 异步加载 159<br>9.1 异步加载技术与爬虫方法 159<br>9.1.1 异步加载技术概述 159<br>9.1.2 异步加载网页示例 159<br>9.1.3 逆向工程 162<br>9.2 综合案例1——爬取简书网用户动态信息 165<br>9.2.1 爬虫思路分析 165<br>9.2.2 爬虫代码及分析 171<br>9.3 综合案例2——爬取简书网7日热门信息 173<br>9.3.1 爬虫思路分析 173<br>9.3.2 爬虫代码及分析 179<br>第10章 表单交互与模拟登录 182<br>10.1 表单交互 182<br>10.1.1 POST方法 182<br>10.1.2 查看网页源代码提交表单 182<br>10.1.3 逆向工程提交表单 185<br>10.2 模拟登录 187<br>10.2.1 Cookie概述 187<br>10.2.2 提交Cookie模拟登录 187<br>10.3 综合案例1——爬取拉勾网招聘信息 188<br>10.3.1 爬虫思路分析 188<br>10.3.2 爬虫代码及分析 193<br>10.4 综合案例2——爬取新浪微博好友圈信息 195<br>10.4.1 词云制作 195<br>10.4.2 爬虫思路分析 202<br>10.4.3 爬虫代码及分析 206<br>第11章 Selenium模拟浏览器 209<br>11.1 Selenium和PhantomJS 209<br>11.1.1 Selenium的概念和安装 209<br>11.1.2 浏览器的选择和安装 209<br>11.2 Selenium和PhantomJS的配合使用 213<br>11.2.1 模拟浏览器操作 213<br>11.2.2 获取异步加载数据 215<br>11.3 综合案例1——爬取QQ空间好友说说 218<br>11.3.1 CSV文件读取 218<br>11.3.2 爬虫思路分析 220<br>11.3.3 爬虫代码及分析 221<br>11.4 综合案例2——爬取淘宝商品信息 224<br>11.4.1 爬虫思路分析 224<br>11.4.2 爬虫代码及分析 226<br>第12章 Scrapy爬虫框架 229<br>12.1 Scrapy的安装和使用 229<br>12.1.1 Scrapy的安装 229<br>12.1.2 创建Scrapy项目 233<br>12.1.3 Scrapy文件介绍 235<br>12.1.4 Scrapy爬虫编写 237<br>12.1.5 Scrapy爬虫运行 239<br>12.2 综合案例1——爬取简书网热门专题信息 240<br>12.2.1 爬虫思路分析 240<br>12.2.2 爬虫代码及分析 244<br>12.3 综合案例2——爬取知乎网Python精华话题 246<br>12.3.1 爬虫思路分析 246<br>12.3.2 爬虫代码及分析 248<br>12.4 综合案例3——爬取简书网专题收录文章 250<br>12.4.1 爬虫思路分析 251<br>12.4.2 爬虫代码及分析 254<br>12.5 综合案例4——爬取简书网推荐信息 257<br>12.5.1 爬虫思路分析 258<br>12.5.2 爬虫代码及分析 260</p>]]></content>
      
      
      
        <tags>
            
            <tag> menu </tag>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python网络爬虫从入门到实践</title>
      <link href="/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/"/>
      <url>/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p>豆瓣书目<br><a id="more"></a><br>推荐序<br>推荐序二<br>前言<br>前言二<br>第1章网络爬虫入门<br>1.1为什么要学网络爬虫<br>1.1.1 网络爬虫能带来什么好处<br>1.1.2能从网络上爬取什么数据<br>1.1.3应不应该学爬虫<br>1.2网络爬虫是否合法<br>1.2.1 Robots协议<br>1.2.2 网络爬虫的约束<br>1.3网络爬虫的基本议题<br>1.3.1 Python爬虫的流程<br>1.3.2三个流程的技术实现<br>2章编写第一个网络爬虫<br>2.1搭建Python平台<br>2.1.1 Python的安装<br>2.1.2使用pip安装第三方库<br>2.1.3使用编译器Jupyter编程<br>2.2 Python使用入门<br>2.2.1基本命令<br>2.2.2数据类型<br>2.2.3条件语句和循环语句<br>2.2.4函数<br>2.2.5面向对象编程<br>2.3编写第一个简单的爬虫<br>第3章静态网页抓取<br>第4章动态网页抓取<br>第5章解析网页<br>第6章数据存储<br>第7章提升爬虫的速度<br>第8章反爬虫问题<br>第9章解决中文乱码<br>第10章登录与验证码处理<br>第11章服务器采集<br>第12章分布式爬虫<br>第13章爬虫实践一：维基百科<br>第14章爬虫实践二：知乎Live<br>第15章爬虫实践三：百度地图API<br>第16章爬虫实践四：餐厅点评</p>]]></content>
      
      
      
        <tags>
            
            <tag> menu </tag>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>文件读写权限</title>
      <link href="/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%9D%83%E9%99%90/"/>
      <url>/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<p>文件读写<br><a id="more"></a></p><h2 id="巧记"><a href="#巧记" class="headerlink" title="巧记"></a>巧记</h2><blockquote><p>+：双可<br>b：二进制<br>单个：只<br>r报错，w新建 （文件不存在时）</p></blockquote><h2 id="一览表"><a href="#一览表" class="headerlink" title="一览表"></a>一览表</h2><table><thead><tr><th></th><th>方式</th><th>权限</th><th>文件不存在</th><th>其他</th></tr></thead><tbody><tr><td>r</td><td></td><td>只读</td><td>报错</td><td></td></tr><tr><td>rb</td><td>二进制读</td><td>只读</td><td></td><td></td></tr><tr><td>w</td><td></td><td>只写</td><td>新建</td><td>文件内容只能是字符串</td></tr><tr><td>wb</td><td>二进制写</td><td>只写</td><td></td><td></td></tr><tr><td>a</td><td></td><td>追加文件，不可读</td><td></td><td></td></tr><tr><td>ab</td><td>二进制追加</td><td>追加文件，不可读</td><td></td><td></td></tr><tr><td>r+</td><td></td><td>可读可写</td><td>报错</td><td></td></tr><tr><td>rb+</td><td>二进制读写</td><td>可读可写</td><td>报错</td><td></td></tr><tr><td>w+</td><td></td><td>可读可写</td><td>新建</td><td></td></tr><tr><td>wb+</td><td>二进制读写</td><td>可读可写</td><td>新建</td><td></td></tr><tr><td>a+</td><td></td><td>追加文件，可读可写</td><td></td><td></td></tr><tr><td>ab+</td><td>二进制读写</td><td>追加文件，可读可写</td><td></td></tr></tbody></table><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readable())</span><br><span class="line">    print(f.writable())</span><br><span class="line"><span class="comment">#     False</span></span><br><span class="line"><span class="comment">#     True</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readable())</span><br><span class="line">    print(f.writable())</span><br><span class="line"><span class="comment">#     True</span></span><br><span class="line"><span class="comment">#     False</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,<span class="string">'r+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readable())</span><br><span class="line">    print(f.writable())</span><br><span class="line"><span class="comment">#     True</span></span><br><span class="line"><span class="comment">#     True</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,<span class="string">'a'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readable())</span><br><span class="line">    print(f.writable())</span><br><span class="line"><span class="comment">#     False</span></span><br><span class="line"><span class="comment">#     True</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,<span class="string">'a+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readable())</span><br><span class="line">    print(f.writable())</span><br><span class="line"><span class="comment">#     True</span></span><br><span class="line"><span class="comment">#     True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> wiki </tag>
            
            <tag> fix </tag>
            
            <tag> 编程基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python文件读写</title>
      <link href="/Python%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/"/>
      <url>/Python%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</url>
      
        <content type="html"><![CDATA[<p>文件读写。<br><a id="more"></a></p><h1 id="f-open-and-f-read"><a href="#f-open-and-f-read" class="headerlink" title="f=open() and f.read()"></a>f=open() and f.read()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">f= open(<span class="string">"file1.txt"</span>,encoding=<span class="string">'utf-8'</span>)<span class="comment">#不写encoding，默认为操作系统编码</span></span><br><span class="line">file_data=f.read() <span class="comment">#完全读取</span></span><br><span class="line">print(file_data)</span><br><span class="line">f.close() <span class="comment">#需要执行关闭操作</span></span><br><span class="line"><span class="comment"># 1111</span></span><br><span class="line"><span class="comment"># 222</span></span><br><span class="line"><span class="comment"># 333</span></span><br><span class="line"><span class="comment"># 44</span></span><br><span class="line"><span class="comment"># 5555</span></span><br><span class="line"><span class="comment"># 666</span></span><br><span class="line"><span class="comment"># 你好!</span></span><br><span class="line"><span class="comment"># hello</span></span><br></pre></td></tr></table></figure><h1 id="with-open-as-if"><a href="#with-open-as-if" class="headerlink" title="with open() as if:"></a>with open() as if:</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,encoding=<span class="string">'utf-8'</span>)<span class="keyword">as</span> f:</span><br><span class="line">    file_data=f.read()</span><br><span class="line">    print(file_data)  <span class="comment">#不需要执行close(),系统会自动关闭。</span></span><br><span class="line"><span class="comment"># 1111</span></span><br><span class="line"><span class="comment"># 222</span></span><br><span class="line"><span class="comment"># 333</span></span><br><span class="line"><span class="comment"># 44</span></span><br><span class="line"><span class="comment"># 5555</span></span><br><span class="line"><span class="comment"># 666</span></span><br><span class="line"><span class="comment"># 你好!</span></span><br><span class="line"><span class="comment"># hello</span></span><br></pre></td></tr></table></figure><h1 id="readline"><a href="#readline" class="headerlink" title="readline()"></a>readline()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,encoding=<span class="string">'utf-8'</span>)<span class="keyword">as</span> f:</span><br><span class="line">    print(f.readable()) <span class="comment">#判断是否可读</span></span><br><span class="line">    print(f.writable()) <span class="comment">#判断是否可写</span></span><br><span class="line">    print(<span class="number">1</span>, f.readline()) <span class="comment">#一次只读一行</span></span><br><span class="line">    print(<span class="number">2</span>, f.readline())</span><br><span class="line">    print(<span class="number">3</span>, f.readline())</span><br><span class="line">    print(<span class="number">4</span>, f.readline())</span><br><span class="line">    print(<span class="number">5</span>, f.readline())</span><br><span class="line">    print(<span class="number">6</span>, f.readline())</span><br><span class="line">    print(<span class="number">7</span>, f.readline())</span><br><span class="line">    print(<span class="number">8</span>, f.readline())</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="comment"># 1 1111</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 2 222</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 3 333</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 4 44</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 5 5555</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 6 666</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 7 你好!</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 8 hello</span></span><br></pre></td></tr></table></figure><h1 id="readlines"><a href="#readlines" class="headerlink" title="readlines()"></a>readlines()</h1><p>将文件内容读取到列表中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,encoding=<span class="string">'utf-8'</span>)<span class="keyword">as</span> f:</span><br><span class="line">   print(f.readlines()) </span><br><span class="line"><span class="comment">#['1111\n', '222\n', '333\n', '44\n', '5555\n', '666\n', '你好!\n', 'hello']</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">        print(i)</span><br><span class="line"><span class="comment">#         1111</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         222</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         333</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         44</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         5555</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         666</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         你好!</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         hello</span></span><br></pre></td></tr></table></figure></p><h1 id="不打印换行符-print-end-’’"><a href="#不打印换行符-print-end-’’" class="headerlink" title="不打印换行符 print(,end=’’)"></a>不打印换行符 print(,end=’’)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'file.txt'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>,newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readlines())</span><br><span class="line"><span class="comment"># #     ['1111\r\n', '222\r\n', '333\r\n', '44\r\n', '5555\r\n', '666\r\n', '你好!\r\n', 'hello']</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">        print(i,end=<span class="string">''</span>) <span class="comment">#不打印换行符</span></span><br><span class="line"><span class="comment">#         1111</span></span><br><span class="line"><span class="comment">#         222</span></span><br><span class="line"><span class="comment">#         333</span></span><br><span class="line"><span class="comment">#         44</span></span><br><span class="line"><span class="comment">#         5555</span></span><br><span class="line"><span class="comment">#         666</span></span><br><span class="line"><span class="comment">#         你好!</span></span><br><span class="line"><span class="comment">#         hello</span></span><br></pre></td></tr></table></figure><h1 id="write-args-writelines-args-和seek-args"><a href="#write-args-writelines-args-和seek-args" class="headerlink" title="write(args),writelines(args)和seek(args)"></a>write(args),writelines(args)和seek(args)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'file.txt'</span>,<span class="string">'w+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f: <span class="comment">#原文件被清空后重新写入</span></span><br><span class="line">    f.write(<span class="string">'a\n'</span>)</span><br><span class="line">    f.write(<span class="string">'b\nc\n'</span>)</span><br><span class="line">    f.writelines([<span class="string">'d\n'</span>, <span class="string">'e\n'</span>])</span><br><span class="line">    f.seek(<span class="number">0</span>) <span class="comment">#将指针seek到0位置，否则读不出数据</span></span><br><span class="line">    print(f.read())</span><br><span class="line"><span class="comment">#     # a</span></span><br><span class="line"><span class="comment">#     # b</span></span><br><span class="line"><span class="comment">#     # c</span></span><br><span class="line"><span class="comment">#     # d</span></span><br><span class="line"><span class="comment">#     # e</span></span><br></pre></td></tr></table></figure><h1 id="从指针位置所在处写入"><a href="#从指针位置所在处写入" class="headerlink" title="从指针位置所在处写入"></a>从指针位置所在处写入</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'file.txt'</span>,<span class="string">'r+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f: <span class="comment">#从指针位置所在处写入</span></span><br><span class="line">    print(f.readline())</span><br><span class="line">    f.write(<span class="string">'a\n'</span>)</span><br><span class="line">    f.write(<span class="string">'b\nc\n'</span>)</span><br><span class="line">    f.writelines([<span class="string">'d\n'</span>, <span class="string">'e\n'</span>])</span><br><span class="line">    f.seek(<span class="number">0</span>) <span class="comment">#将指针seek到0位置，否则读不出数据</span></span><br><span class="line">    print(f.read())</span><br><span class="line"><span class="comment">#     # 1111</span></span><br><span class="line"><span class="comment">#     #</span></span><br><span class="line"><span class="comment">#     # 1111</span></span><br><span class="line"><span class="comment">#     # 222</span></span><br><span class="line"><span class="comment">#     # 333</span></span><br><span class="line"><span class="comment">#     # 44</span></span><br><span class="line"><span class="comment">#     # 5555</span></span><br><span class="line"><span class="comment">#     # 666</span></span><br><span class="line"><span class="comment">#     # 你好!</span></span><br><span class="line"><span class="comment">#     # helloa</span></span><br><span class="line"><span class="comment">#     # b</span></span><br><span class="line"><span class="comment">#     # c</span></span><br><span class="line"><span class="comment">#     # d</span></span><br><span class="line"><span class="comment">#     # e</span></span><br></pre></td></tr></table></figure><h1 id="写到文件最后"><a href="#写到文件最后" class="headerlink" title="写到文件最后"></a>写到文件最后</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'file.txt'</span>,<span class="string">'a+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'写到文件最后'</span>)</span><br><span class="line">    f.seek(<span class="number">0</span>)</span><br><span class="line">    print(f.read())</span><br><span class="line"><span class="comment">#     # 1111</span></span><br><span class="line"><span class="comment">#     # 222</span></span><br><span class="line"><span class="comment">#     # 333</span></span><br><span class="line"><span class="comment">#     # 44</span></span><br><span class="line"><span class="comment">#     # 5555</span></span><br><span class="line"><span class="comment">#     # 666</span></span><br><span class="line"><span class="comment">#     # 你好!</span></span><br><span class="line"><span class="comment">#     # hello写到文件最后</span></span><br></pre></td></tr></table></figure><h1 id="查看文件编码"><a href="#查看文件编码" class="headerlink" title="查看文件编码"></a>查看文件编码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'file.txt'</span>,<span class="string">'a+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.encoding) <span class="comment">#查看文件编码</span></span><br><span class="line"><span class="comment">#     #utf - 8</span></span><br><span class="line"><span class="comment"># #'字符串'---------encode---------》bytes</span></span><br><span class="line"><span class="comment"># #bytes---------decode---------》'字符串'</span></span><br></pre></td></tr></table></figure><h1 id="b模式不能指定编码"><a href="#b模式不能指定编码" class="headerlink" title="b模式不能指定编码"></a>b模式不能指定编码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'file.txt'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    file_data=f.read()</span><br><span class="line">    print(file_data)</span><br><span class="line">    print(file_data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="comment">#     # b'1111\r\n222\r\n333\r\n44\r\n5555\r\n666\r\n\xe4\xbd\xa0\xe5\xa5\xbd!\r\nhello'</span></span><br><span class="line"><span class="comment">#     # 1111</span></span><br><span class="line"><span class="comment">#     # 222</span></span><br><span class="line"><span class="comment">#     # 333</span></span><br><span class="line"><span class="comment">#     # 44</span></span><br><span class="line"><span class="comment">#     # 5555</span></span><br><span class="line"><span class="comment">#     # 666</span></span><br><span class="line"><span class="comment">#     # 你好!</span></span><br><span class="line"><span class="comment">#     # hello</span></span><br></pre></td></tr></table></figure><h1 id="边写边读"><a href="#边写边读" class="headerlink" title="边写边读"></a>边写边读</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'file.txt'</span>,<span class="string">'wb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    file_data = <span class="string">'test wb'</span></span><br><span class="line">    f.write(file_data.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    f.seek(<span class="number">0</span>)</span><br><span class="line">    print(f.read())</span><br><span class="line"><span class="comment">#     # b'test wb'</span></span><br></pre></td></tr></table></figure><h1 id="flush-tell-seek-truncate"><a href="#flush-tell-seek-truncate" class="headerlink" title="flush(),tell(),seek(),truncate()"></a>flush(),tell(),seek(),truncate()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">flush() 文件内容从内存刷到硬盘</span><br><span class="line">tell()  查看文件当前光标位置</span><br><span class="line">seek(<span class="number">3</span>) <span class="comment">#从开头开始算，将光标移动到第三个字节</span></span><br><span class="line">        <span class="comment">#   seek 有三种工作方式，seek(offset[, whence])</span></span><br><span class="line">        <span class="comment">#   seek(2,0)=seek(2),0是默认方式，相当于从0字节位置开始</span></span><br><span class="line">        <span class="comment">#   seek(2,1)   1 相对当前位置</span></span><br><span class="line">        <span class="comment">#   seek(-2,2)  2 从文件末尾开始</span></span><br><span class="line">truncate(<span class="number">10</span>) <span class="comment">#从开头开始算，将文件只保留从0-10个字节的内容，文件打开方式必须包含"写"，</span></span><br><span class="line">               <span class="comment">#但是w和w+除外，因为这两种方式会首先把文件清空。</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'file.txt'</span>,<span class="string">'ab'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.truncate(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h1 id="打印文件最后一行"><a href="#打印文件最后一行" class="headerlink" title="打印文件最后一行"></a>打印文件最后一行</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f:   <span class="comment">#这种方式不会读取整个文件，需要从哪里读取才从哪里开始读取，循环文件的推荐方式</span></span><br><span class="line">        offs=<span class="number">-5</span>         <span class="comment">#偏移量，根据一行大小确定</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            f.seek(offs,<span class="number">2</span>)</span><br><span class="line">            data=f.readlines()</span><br><span class="line">            <span class="keyword">if</span> len(data) &gt; <span class="number">1</span>:</span><br><span class="line">                print(<span class="string">'这是最后一行：'</span>,data[<span class="number">-1</span>].decode(<span class="string">'utf-8'</span>))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            offs*=<span class="number">2</span></span><br><span class="line"><span class="comment"># 这是最后一行： hello你好!hello你好!hello你好!hello你好!</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python基础 </tag>
            
            <tag> wiki </tag>
            
            <tag> fix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python字符串操作</title>
      <link href="/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
      <url>/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>字符串。<br><a id="more"></a><br><a href="https://docs.python.org/3/library/string.html" target="_blank" rel="noopener">https://docs.python.org/3/library/string.html</a></p><h1 id="dir-str"><a href="#dir-str" class="headerlink" title="dir(str)"></a>dir(str)</h1><p>split()：一个能基于某些分隔符来对字符串进行切割的方法。如果你没有为其提供具体参数，它就会默认空格为其分隔符。<br>strip()：一个可以从字符串中删除其尾随空白符（如’\n’、’\n\r’）的方法。<br>另外，你也可以通过rstrip()和lstrip()来选择是剥离字符串左边还是右边的尾部空白符。upper()/lower()：我们可以用这些方法来改变字符串中字母的大小写。   &gt;&gt;&gt; print<br>replace()：该方法可用于替换目标字符串中的某个子串。<br>当然，字符串类型的函数可远不止这些。这里只是讨论了其中最常用的一些而已<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(str)</span><br><span class="line">[<span class="string">'__add__'</span>, <span class="string">'__class__'</span>, <span class="string">'__contains__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__getitem__'</span>, <span class="string">'__getnewargs__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__iter__'</span>, <span class="string">'__le__'</span>, <span class="string">'__len__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__mod__'</span>, <span class="string">'__mul__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__rmod__'</span>, <span class="string">'__rmul__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'capitalize'</span>, <span class="string">'casefold'</span>, <span class="string">'center'</span>, <span class="string">'count'</span>, <span class="string">'encode'</span>, <span class="string">'endswith'</span>, <span class="string">'expandtabs'</span>, <span class="string">'find'</span>, <span class="string">'format'</span>, <span class="string">'format_map'</span>, <span class="string">'index'</span>, <span class="string">'isalnum'</span>, <span class="string">'isalpha'</span>, <span class="string">'isascii'</span>, <span class="string">'isdecimal'</span>, <span class="string">'isdigit'</span>, <span class="string">'isidentifier'</span>, <span class="string">'islower'</span>, <span class="string">'isnumeric'</span>, <span class="string">'isprintable'</span>, <span class="string">'isspace'</span>, <span class="string">'istitle'</span>, <span class="string">'isupper'</span>, <span class="string">'join'</span>, <span class="string">'ljust'</span>, <span class="string">'lower'</span>, <span class="string">'lstrip'</span>, <span class="string">'maketrans'</span>, <span class="string">'partition'</span>, <span class="string">'replace'</span>, <span class="string">'rfind'</span>, <span class="string">'rindex'</span>, <span class="string">'rjust'</span>, <span class="string">'rpartition'</span>, <span class="string">'rsplit'</span>, <span class="string">'rstrip'</span>, <span class="string">'split'</span>, <span class="string">'splitlines'</span>, <span class="string">'startswith'</span>, <span class="string">'strip'</span>, <span class="string">'swapcase'</span>, <span class="string">'title'</span>, <span class="string">'translate'</span>, <span class="string">'upper'</span>, <span class="string">'zfill'</span>]</span><br></pre></td></tr></table></figure></p><h2 id="去空格及特殊符号"><a href="#去空格及特殊符号" class="headerlink" title="去空格及特殊符号"></a>去空格及特殊符号</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.strip().lstrip().rstrip(<span class="string">','</span>)</span><br></pre></td></tr></table></figure><h2 id="复制字符串"><a href="#复制字符串" class="headerlink" title="复制字符串"></a>复制字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'Ab'</span></span><br><span class="line">print(str1*<span class="number">5</span>)  <span class="comment">## AbAbAbAbAb</span></span><br><span class="line">print(<span class="number">5</span>*str1)  <span class="comment">## AbAbAbAbAb</span></span><br></pre></td></tr></table></figure><h2 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h2><p><a href="https://www.pythontab.com/html/2015/pythonhexinbiancheng_1112/981.html" target="_blank" rel="noopener">python字符串连接的三种方法及其效率、适用场景详解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1=<span class="string">'a'</span></span><br><span class="line">str2=<span class="string">'b'</span></span><br><span class="line"><span class="keyword">print</span> str1+str2  <span class="comment">## ab</span></span><br></pre></td></tr></table></figure><h2 id="连接字符串-带连接符"><a href="#连接字符串-带连接符" class="headerlink" title="连接字符串(带连接符)"></a>连接字符串(带连接符)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#S.join(seq) #把seq代表的字符串序列，用S连接起来</span></span><br><span class="line">delimiter = <span class="string">','</span></span><br><span class="line">mylist = [<span class="string">'Brazil'</span>, <span class="string">'Russia'</span>, <span class="string">'India'</span>, <span class="string">'China'</span>]  <span class="comment">#Brazil,Russia,India,China</span></span><br><span class="line"><span class="keyword">print</span> delimiter.join(mylist)</span><br></pre></td></tr></table></figure><h2 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#S.rsplit([sep, [maxsplit]])</span></span><br><span class="line"><span class="comment">#以sep为分隔符，把S分成一个list。maxsplit表示分割的次数。默认的分割符为空白字符</span></span><br><span class="line">s = <span class="string">'ab,cde,fgh,ijk'</span></span><br><span class="line">print(s.split(<span class="string">','</span>)) <span class="comment">#返回列表 ['ab', 'cde', 'fgh', 'ijk']</span></span><br></pre></td></tr></table></figure><h2 id="按行分割字符串"><a href="#按行分割字符串" class="headerlink" title="按行分割字符串"></a>按行分割字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S.splitlines([keepends])</span><br><span class="line"><span class="comment">#把S按照行分割符分为一个list，keepends是一个bool值，如果为真每行后而会保留行分割符。</span></span><br></pre></td></tr></table></figure><h2 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">S.replace(oldstr, newstr, [count])</span><br><span class="line"><span class="comment">#把S中的oldstar替换为newstr，count为替换次数。这是替换的通用形式，还有一些函数进行特殊字符的替换</span></span><br><span class="line">S.strip([chars])</span><br><span class="line"><span class="comment">#把S中前后chars中有的字符全部去掉，可以理解为把S前后chars替换为None</span></span><br><span class="line">S.lstrip([chars])</span><br><span class="line">S.rstrip([chars])</span><br><span class="line">S.expandtabs([tabsize])<span class="comment">#把S中的tab字符替换没空格，每个tab替换为tabsize个空格，默认是8个</span></span><br></pre></td></tr></table></figure><h2 id="批量替换"><a href="#批量替换" class="headerlink" title="批量替换"></a>批量替换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#S.translate(table[,deletechars])</span></span><br><span class="line"><span class="comment">## 使用上面的函数产后的翻译表，把S进行翻译，并把deletechars中有的字符删掉。需要注意的是，如果S为unicode字符串，那么就不支持 deletechars参数，可以使用把某个字符翻译为None的方式实现相同的功能。此外还可以使用codecs模块的功能来创建更加功能强大的翻译表。</span></span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> maketrans   <span class="comment"># 引用 maketrans 函数。</span></span><br><span class="line">intab = <span class="string">"aeiou"</span></span><br><span class="line">outtab = <span class="string">"12345"</span></span><br><span class="line">trantab = maketrans(intab, outtab)  <span class="comment">#这里注意一下</span></span><br><span class="line">str = <span class="string">"this is string example....wow!!!"</span>;</span><br><span class="line"><span class="keyword">print</span> str.translate(trantab);</span><br></pre></td></tr></table></figure><h2 id="查找字符"><a href="#查找字符" class="headerlink" title="查找字符"></a>查找字符</h2><p>返回第一个字符出现的位置。&lt; 0 为未找到<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'strchr'</span></span><br><span class="line">substr = <span class="string">'ch'</span></span><br><span class="line">n = str.index(substr)</span><br><span class="line"><span class="keyword">print</span> n  <span class="comment">## 3 非子字符串时报错，其余返回子字符串第一个字符的下标。中文报错</span></span><br></pre></td></tr></table></figure></p><h2 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sStr1 = <span class="string">'abcdefg'</span></span><br><span class="line">sStr2 = <span class="string">'cde'</span></span><br><span class="line"><span class="keyword">print</span> sStr1.find(sStr2) <span class="comment">#非子字符串时返回-1。否则返回子字符串第一个字符的下标。中文报错。</span></span><br></pre></td></tr></table></figure><h2 id="字符串中的搜索"><a href="#字符串中的搜索" class="headerlink" title="字符串中的搜索"></a>字符串中的搜索</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回S中出现substr的第一个字母的标号，如果S中没有substr则返回-1。start和end作用就相当于在S[start:end]中搜索</span></span><br><span class="line">S.index(substr, [start, [end]])</span><br><span class="line"><span class="comment">#与find()相同，只是在S中没有substr时，会返回一个运行时错误</span></span><br><span class="line">S.rfind(substr, [start, [end]])</span><br><span class="line"><span class="comment">#返回S中最后出现的substr的第一个字母的标号，如果S中没有substr则返回-1，也就是说从右边算起的第一次出现的substr的首字母标号</span></span><br><span class="line">S.rindex(substr, [start, [end]])</span><br><span class="line">S.count(substr, [start, [end]]) <span class="comment">#计算substr在S中出现的次数</span></span><br></pre></td></tr></table></figure><h2 id="比较字符串-cmp-str1-str2"><a href="#比较字符串-cmp-str1-str2" class="headerlink" title="比较字符串 cmp(str1,str2)"></a>比较字符串 cmp(str1,str2)</h2><p> <a href="http://www.runoob.com/python/func-number-cmp.html" target="_blank" rel="noopener">http://www.runoob.com/python/func-number-cmp.html</a></p><h2 id="and"><a href="#and" class="headerlink" title="and"></a>and</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sStr1 = <span class="string">'12345678'</span></span><br><span class="line">sStr2 = <span class="string">'ab'</span></span><br><span class="line"><span class="keyword">print</span> (sStr2 <span class="keyword">and</span> sStr1) <span class="comment">## 12345678</span></span><br><span class="line"><span class="keyword">print</span> (sStr1 <span class="keyword">and</span> sStr2) <span class="comment">## ab</span></span><br><span class="line"><span class="keyword">print</span> len(sStr2 <span class="keyword">and</span> sStr1) <span class="comment">## 8</span></span><br><span class="line"><span class="keyword">print</span> len(sStr1 <span class="keyword">and</span> sStr2) <span class="comment">## 2</span></span><br></pre></td></tr></table></figure><h2 id="字符串长度-len-str"><a href="#字符串长度-len-str" class="headerlink" title="字符串长度 len(str)"></a>字符串长度 len(str)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sStr1 = <span class="string">'strlen'</span></span><br><span class="line"><span class="keyword">print</span> len(sStr1)</span><br></pre></td></tr></table></figure><h2 id="将字符串中的大小写转换"><a href="#将字符串中的大小写转换" class="headerlink" title="将字符串中的大小写转换"></a>将字符串中的大小写转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S=<span class="string">'abEfeDg'</span></span><br><span class="line">print(S.lower()) <span class="comment">#小写 abefedg</span></span><br><span class="line">print(S.upper()) <span class="comment">#大写 ABEFEDG</span></span><br><span class="line">print(S.swapcase()) <span class="comment">#大小写互换 ABeFEdG</span></span><br><span class="line">print(S.capitalize()) <span class="comment">#首字母大写 Abefedg</span></span><br></pre></td></tr></table></figure><h2 id="取子字符串"><a href="#取子字符串" class="headerlink" title="取子字符串"></a>取子字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tr1 = <span class="string">'1234567890'</span></span><br><span class="line">print(tr1[<span class="number">0</span>:<span class="number">3</span>]) <span class="comment">#截取第一位到第三位的字符 123</span></span><br><span class="line">print(tr1[:]) <span class="comment">#截取字符串的全部字符 1234567890</span></span><br><span class="line">print(tr1[<span class="number">6</span>:]) <span class="comment">#截取第七个字符到结尾 7890</span></span><br><span class="line">print(tr1[:<span class="number">-3</span>]) <span class="comment">#截取从头开始到倒数第三个字符之前 1234567</span></span><br><span class="line">print(tr1[<span class="number">2</span>]) <span class="comment">#截取第三个字符 3</span></span><br><span class="line">print(tr1[<span class="number">-1</span>]) <span class="comment">#截取倒数第一个字符 0</span></span><br><span class="line">print(tr1[:<span class="number">-1</span>]) <span class="comment">#123456789 </span></span><br><span class="line">print(tr1[::<span class="number">-1</span>]) <span class="comment">#创造一个与原字符串顺序相反的字符串 0987654321 翻转字符串</span></span><br><span class="line">print(tr1[<span class="number">-3</span>:<span class="number">-1</span>]) <span class="comment">#截取倒数第三位与倒数第一位之前的字符 89</span></span><br><span class="line">print(tr1[<span class="number">-3</span>:]) <span class="comment">#截取倒数第三位到结尾 890</span></span><br><span class="line">print(tr1[:<span class="number">-5</span>:<span class="number">-3</span>]) <span class="comment">#逆序截取，具体啥意思没搞明白？ 07</span></span><br></pre></td></tr></table></figure><h2 id="扫描字符串"><a href="#扫描字符串" class="headerlink" title="扫描字符串"></a>扫描字符串</h2><h3 id="for-c-in-str1"><a href="#for-c-in-str1" class="headerlink" title="for c in str1:"></a>for c in str1:</h3><h3 id="if-c-in-str2"><a href="#if-c-in-str2" class="headerlink" title="if c in str2:"></a>if c in str2:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#strpbrk(sStr1,sStr2)</span></span><br><span class="line">sStr1 = <span class="string">'cekjgdklab'</span></span><br><span class="line">sStr2 = <span class="string">'gka'</span></span><br><span class="line">nPos = <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> sStr1:</span><br><span class="line">    print(c)</span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">in</span> sStr2:</span><br><span class="line">        nPos = sStr1.index(c)</span><br><span class="line">        print(nPos)</span><br><span class="line"><span class="comment">## c</span></span><br><span class="line"><span class="comment">## e</span></span><br><span class="line"><span class="comment">## k</span></span><br><span class="line"><span class="comment">## 2</span></span><br><span class="line"><span class="comment">## j</span></span><br><span class="line"><span class="comment">## g</span></span><br><span class="line"><span class="comment">## 4</span></span><br><span class="line"><span class="comment">## d</span></span><br><span class="line"><span class="comment">## k</span></span><br><span class="line"><span class="comment">## 2</span></span><br><span class="line"><span class="comment">## l</span></span><br><span class="line"><span class="comment">## a</span></span><br><span class="line"><span class="comment">## 8</span></span><br><span class="line"><span class="comment">## b</span></span><br></pre></td></tr></table></figure><h2 id="PHP-中-addslashes-的实现"><a href="#PHP-中-addslashes-的实现" class="headerlink" title="PHP 中 addslashes 的实现"></a>PHP 中 addslashes 的实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addslashes</span><span class="params">(s)</span>:</span></span><br><span class="line">    d = &#123;<span class="string">'"'</span>:<span class="string">'\\"'</span>, <span class="string">"'"</span>:<span class="string">"\\'"</span>, <span class="string">"\0"</span>:<span class="string">"\\\0"</span>, <span class="string">"\\"</span>:<span class="string">"\\\\"</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(d.get(c, c) <span class="keyword">for</span> c <span class="keyword">in</span> s)</span><br><span class="line">    <span class="comment">## s = "John 'Johny' Doe (a.k.a. \"Super Joe\")\\\0"</span></span><br><span class="line"><span class="keyword">print</span> s</span><br><span class="line"><span class="keyword">print</span> addslashes(s)</span><br></pre></td></tr></table></figure><h2 id="只显示字母与数字"><a href="#只显示字母与数字" class="headerlink" title="只显示字母与数字"></a>只显示字母与数字</h2><h3 id="if-not-c-in-format"><a href="#if-not-c-in-format" class="headerlink" title="if not c in format:"></a>if not c in format:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">OnlyCharNum</span><span class="params">(s)</span>:</span></span><br><span class="line">    s2 = s.lower();</span><br><span class="line">    fomart = <span class="string">'abcdefghijklmnopqrstuvwxyz0123456789'</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s2:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> c <span class="keyword">in</span> fomart:</span><br><span class="line">            s = s.replace(c,<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">print(OnlyCharNum(<span class="string">"a000 Aaa-b"</span>)) <span class="comment">## a000Aaab</span></span><br></pre></td></tr></table></figure><h2 id="字符串在输出时的对齐"><a href="#字符串在输出时的对齐" class="headerlink" title="字符串在输出时的对齐"></a>字符串在输出时的对齐</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"this is string example wow!!!"</span></span><br><span class="line">print(str.ljust(<span class="number">40</span>,<span class="string">'a'</span>))   </span><br><span class="line">print(str.ljust(<span class="number">41</span>,<span class="string">'a'</span>))   </span><br><span class="line">print(str.rjust(<span class="number">40</span>,<span class="string">'a'</span>))  </span><br><span class="line">print(str.center(<span class="number">40</span>,))</span><br><span class="line">print(str.zfill(<span class="number">40</span>))</span><br><span class="line"><span class="comment">## this is string example wow!!!aaaaaaaaaaa</span></span><br><span class="line"><span class="comment">## this is string example wow!!!aaaaaaaaaaaa</span></span><br><span class="line"><span class="comment">## aaaaaaaaaaathis is string example wow!!!</span></span><br><span class="line"><span class="comment">##      this is string example wow!!!</span></span><br><span class="line"><span class="comment">## 00000000000this is string example wow!!!</span></span><br></pre></td></tr></table></figure><h2 id="字符串还有一对编码和解码的函数"><a href="#字符串还有一对编码和解码的函数" class="headerlink" title="字符串还有一对编码和解码的函数"></a>字符串还有一对编码和解码的函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#S.encode([encoding,[errors]])</span></span><br><span class="line"><span class="comment">## 其中encoding可以有多种值，</span></span><br><span class="line"><span class="comment">## 比如gb2312 gbk gb18030 bz2 zlib big5 bzse64等都支持。</span></span><br><span class="line"><span class="comment">## errors默认值为"strict"，意思是UnicodeError。</span></span><br><span class="line"><span class="comment">## 可能的值还有'ignore', 'replace', 'xmlcharrefreplace', 'backslashreplace' 和所有的通过codecs.register_error注册的值。</span></span><br><span class="line"><span class="comment">## 这一部分内容涉及codecs模块</span></span><br><span class="line">S.decode([encoding,[errors]])</span><br></pre></td></tr></table></figure><h2 id="字符串的测试、判断函数"><a href="#字符串的测试、判断函数" class="headerlink" title="字符串的测试、判断函数"></a>字符串的测试、判断函数</h2><p>这一类函数在string模块中没有，这些函数返回的都是bool值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">S.startswith(prefix[,start[,end]])</span><br><span class="line"><span class="comment">#是否以prefix开头</span></span><br><span class="line">S.endswith(suffix[,start[,end]])</span><br><span class="line"><span class="comment">#以suffix结尾</span></span><br><span class="line">S.isalnum() <span class="comment">#是否全是字母和数字，并至少有一个字符</span></span><br><span class="line">S.isalpha() <span class="comment">#是否全是字母，并至少有一个字符</span></span><br><span class="line">S.isdigit() <span class="comment">#是否全是数字，并至少有一个字符</span></span><br><span class="line">S.isspace() <span class="comment">#是否全是空白字符，并至少有一个字符</span></span><br><span class="line">S.islower() <span class="comment">#S中的字母是否全是小写</span></span><br><span class="line">S.isupper() <span class="comment">#S中的字母是否全是大写</span></span><br><span class="line">S.istitle() <span class="comment">#S是否是首字母大写的</span></span><br></pre></td></tr></table></figure></p><h2 id="字符串类型转换函数，这几个函数只在string模块中有"><a href="#字符串类型转换函数，这几个函数只在string模块中有" class="headerlink" title="字符串类型转换函数，这几个函数只在string模块中有"></a>字符串类型转换函数，这几个函数只在string模块中有</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string.atoi(s[,base])</span><br><span class="line"><span class="comment">#base默认为10，如果为0,那么s就可以是012或0x23这种形式的字符串，如果是16那么s就只能是0x23或0X12这种形式的字符串</span></span><br><span class="line">string.atol(s[,base]) <span class="comment">#转成long</span></span><br><span class="line">string.atof(s[,base]) <span class="comment">#转成float</span></span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这里再强调一次，字符串对象是不可改变的:<br>也就是说在python创建一个字符串后，你不能把这个字符中的某一部分改变。<br>任何上面的函数改变了字符串后，都会返回一个新的字符串，原字串并没有变。<br>也有变通的办法的:<br>可以用S=list(S)这个函数把S变为由单个字符为成员的list.<br>这样的话就可以使用S[3]=’a’的方式改变值，然后再使用S=” “.join(S)还原成字符串</p>]]></content>
      
      
      
        <tags>
            
            <tag> python基础 </tag>
            
            <tag> wiki </tag>
            
            <tag> fix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>转载：使用Tkinter模块来创建简单的GUI程序</title>
      <link href="/%E4%BD%BF%E7%94%A8Tkinter%E6%A8%A1%E5%9D%97%E6%9D%A5%E5%88%9B%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84GUI%E7%A8%8B%E5%BA%8F/"/>
      <url>/%E4%BD%BF%E7%94%A8Tkinter%E6%A8%A1%E5%9D%97%E6%9D%A5%E5%88%9B%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84GUI%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>转载。<br><a id="more"></a><br>学了一段时间python，总想用它来做一个gui的界面程序，嘿嘿，主要是为了炫耀一下啊。<br>下面整理了一些python Tkinter模块的小例子，希望大家能够做一个gui程序出来。<br>使用Tkinter模块来创建简单的GUI程序。<br>Tkinter的Widgets有：Button、Canvas、Checkbutton、Entry、Frame、Label、Listbox、Menu、Menubutton、Message、Radiobutton、Scales、Scrollbar、TEXT、Toplevel等。<br>例：</p>]]></content>
      
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>github</title>
      <link href="/github/"/>
      <url>/github/</url>
      
        <content type="html"><![CDATA[<p>github学习笔记<br><a id="more"></a></p><h2 id="watch、star和fork"><a href="#watch、star和fork" class="headerlink" title="watch、star和fork"></a>watch、star和fork</h2><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>该仓库的更新信息都会显示在用户的公开活动中。</p><h3 id="star"><a href="#star" class="headerlink" title="star"></a>star</h3><p>做书签用。反应仓库的受关注程度。判断仓库热门程度的指标</p><h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p>参与这个库开发的人</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><p>仓库文件列表。简要说明和URL</p><h3 id="commit-当前分支的提交历史"><a href="#commit-当前分支的提交历史" class="headerlink" title="commit 当前分支的提交历史"></a>commit 当前分支的提交历史</h3><h3 id="branches-分支列表"><a href="#branches-分支列表" class="headerlink" title="branches 分支列表"></a>branches 分支列表</h3><h3 id="releases-标签列表"><a href="#releases-标签列表" class="headerlink" title="releases 标签列表"></a>releases 标签列表</h3><p>可以将标签加入时的文件以归档形势（zip、tar.gz）下载到本地。软件在升级时一般需要打标签。<br><a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE</a><br>像其他版本控制系统（VCS）一样，Git 可以给历史中的某一个提交打上标签，以示重要。 比较有代表性的是人们会使用这个功能来标记发布结点（v1.0 等等）。 在本节中，你将会学习如何列出已有的标签、如何创建新标签、以及不同类型的标签分别是什么。</p><h3 id="contributors-pull-requests被采纳的人数-作者"><a href="#contributors-pull-requests被采纳的人数-作者" class="headerlink" title="contributors pull requests被采纳的人数+作者"></a>contributors pull requests被采纳的人数+作者</h3><h2 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h2><p>bug报告<br>功能添加<br>方向性讨论<br>Pull Request时会自动创建Issue</p><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p><strong>Open</strong>状态的Issue数</p><h2 id="Pull-Requests"><a href="#Pull-Requests" class="headerlink" title="Pull Requests"></a>Pull Requests</h2><p>列表查看并管理Pull Requests</p><h3 id="数字-1"><a href="#数字-1" class="headerlink" title="数字"></a>数字</h3><p>Open的Pull Requests数量</p><h2 id="wiki"><a href="#wiki" class="headerlink" title="wiki"></a>wiki</h2><p>提供页面描述功能。记录共享信息或软件文档。</p><h2 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h2><p>当前仓库的设置。</p><h2 id="Insight"><a href="#Insight" class="headerlink" title="Insight"></a>Insight</h2><h3 id="SSH-clone-URL"><a href="#SSH-clone-URL" class="headerlink" title="SSH clone URL"></a>SSH clone URL</h3><p>克隆仓库时所需要的URL</p><h3 id="Referring-sites"><a href="#Referring-sites" class="headerlink" title="Referring sites"></a>Referring sites</h3><p>访客来之前访问的网站</p><h3 id="Pulse"><a href="#Pulse" class="headerlink" title="Pulse"></a>Pulse</h3><p>显示该仓库最近的活动。issue和Pull Requests</p><h3 id="Graphs。似乎改成了Traffic"><a href="#Graphs。似乎改成了Traffic" class="headerlink" title="Graphs。似乎改成了Traffic"></a>Graphs。似乎改成了Traffic</h3><p>以图表形式显示该仓库的各项指标。</p><h3 id="network"><a href="#network" class="headerlink" title="network"></a>network</h3><p>以图表行政显示仓库当前的状态及fork出的状态。同时会显示成员列表。</p><h2 id="download-zip-与git-clone"><a href="#download-zip-与git-clone" class="headerlink" title="download zip 与git clone"></a>download zip 与git clone</h2><p>download zip：单纯下载到本地，无法查看日志和对仓库进行修改</p>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> wiki </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018年11月GitHub项目</title>
      <link href="/2018%E5%B9%B411%E6%9C%88GitHub%E9%A1%B9%E7%9B%AE/"/>
      <url>/2018%E5%B9%B411%E6%9C%88GitHub%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>转载来的github项目。<br><a id="more"></a></p><h3 id="1、Faster-R-CNN-and-Mask-R-CNN-in-PyTorch-1-0"><a href="#1、Faster-R-CNN-and-Mask-R-CNN-in-PyTorch-1-0" class="headerlink" title="1、Faster R-CNN and Mask R-CNN in PyTorch 1.0"></a><strong>1、Faster R-CNN and Mask R-CNN in PyTorch 1.0</strong></h3><p><strong><img src="https://mmbiz.qpic.cn/mmbiz_png/CicicOQ3m1WpcibUib4Otia5zZlkRmkRR1aJlbakSvib3EK4bFsxwA8iba03sZicdM8qa5ibFMg1yGg98DcBia34IiacuJqSA/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></strong></p><p>如今，计算机视觉已经变得非常流行，各组织都在争相在其产品中实现和集成最新的算法。对象检测是该领域最热门的技能。这是Facebook的一个非常酷的项目，它的目的是为使用流行的PyTorch 1.0框架创建分割和检测模型提供构建模块。Facebook声称这比它的Detectron框架快了两倍，并且带有预先训练的模型。</p><p>github地址：<a href="https://github.com/facebookresearch/maskrcnn-benchmark" target="_blank" rel="noopener">https://github.com/facebookresearch/maskrcnn-benchmark</a></p><h3 id="2、腾讯ML图像-最大的开源多标签图像数据库"><a href="#2、腾讯ML图像-最大的开源多标签图像数据库" class="headerlink" title="2、腾讯ML图像(最大的开源多标签图像数据库)"></a><strong>2、腾讯ML图像(最大的开源多标签图像数据库)</strong></h3><p><strong><img src="https://mmbiz.qpic.cn/mmbiz_png/CicicOQ3m1WpcibUib4Otia5zZlkRmkRR1aJlRFe5N16sGnBgx60ibA6Cxib7ibVvkL1NF6gpVERE3oGl22M9jBvWm3A8Q/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></strong></p><p>这个资源库是所有深度学习爱好者的金矿。该数据集中包含17,609,752个训练图像和88,739个验证图像，这些图像url最多带有11,166个类别的注释。<br>该项目还包括一个训练有素的Resnet-101模型，该模型通过迁移学习在ImageNet上的准确率达到了80.73%。存储库包含关于如何以及从何处开始的详细信息和代码。</p><p>github地址：<a href="https://github.com/Tencent/tencent-ml-images" target="_blank" rel="noopener">https://github.com/Tencent/tencent-ml-images</a></p><h3 id="3、谷歌AI的BERT-NLP-PyTorch实现"><a href="#3、谷歌AI的BERT-NLP-PyTorch实现" class="headerlink" title="3、谷歌AI的BERT (NLP)(PyTorch实现)"></a><strong>3、谷歌AI的BERT (NLP)(PyTorch实现)</strong></h3><p><strong><img src="https://mmbiz.qpic.cn/mmbiz_png/CicicOQ3m1WpcibUib4Otia5zZlkRmkRR1aJlkN36MxBFVyoX7iaT3ibftsx5NOYuYx7B0WIrXr00rictBfNaibhukJ1MAw/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></strong>谷歌的BERT是一种语言表示模型，代表来自转换器的双向编码器表示，该模型已经在机器学习社区引起了轰动。BERT在11个自然语言处理(NLP)任务中设置了各种各样的新基准。对于某些人来说，在广泛的NLP任务中使用预先训练的语言模型可能听起来很奇怪，但是BERT框架已经将其转化为现实。在流行的小组问答测试中，它甚至明显优于人类。这个存储库包含用于在您自己的机器上实现BERT的PyTorch代码。正如谷歌大脑研究科学家Thang Luong在推特上所说，这很可能是NLP新时代的开始。</p><p>github地址：<a href="https://github.com/codertimo/BERT-pytorch" target="_blank" rel="noopener">https://github.com/codertimo/BERT-pytorch</a></p><h3 id="4、最新Arxiv研究论文及其摘要提取"><a href="#4、最新Arxiv研究论文及其摘要提取" class="headerlink" title="4、最新Arxiv研究论文及其摘要提取"></a><strong>4、最新Arxiv研究论文及其摘要提取</strong></h3><p>我们怎样才能掌握机器学习的最新研究成果?我们似乎几乎每周都能看到突破，跟上它们是一项艰巨的挑战，大多数顶尖的研究人员都在arxiv.org网站上发布了他们的论文全文，那么有没有什么方法来整理最新的论文呢?是的,有!这个存储库使用Python (v3.x)通过抓取arxiv论文并总结它们的摘要来返回最新的结果。这是一个非常有用的工具，因为它将帮助我们与最新的论文保持联系，让我们选择我们想读的。正如存储库中提到的，您可以运行以下命令来搜索关键字:</p><p>github地址：<a href="https://github.com/chiphuyen/sotawhat" target="_blank" rel="noopener">https://github.com/chiphuyen/sotawhat</a></p><h3 id="5、DeepMimic"><a href="#5、DeepMimic" class="headerlink" title="5、DeepMimic"></a><strong>5、DeepMimic</strong></h3><p><strong><img src="https://mmbiz.qpic.cn/mmbiz_png/CicicOQ3m1WpcibUib4Otia5zZlkRmkRR1aJlhbvs0Z1xE6PIlD9HmX1YeQc2UR38yUW2g4SeBQDJIq1buaUIFuRQAA/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></strong></p><p>我总是试图在这些列表中包含至少一个强化学习库—主要是因为我觉得这个领域的每个人都应该了解这个领域的最新进展。这个月的参赛作品是一个迷人的单动作模仿与深度强化学习。本库实现了“深度模拟:基于物理的角色技能深度强化学习的示例指导”论文，发表于SIGGRAPH 2018。引用知识库中的话说，“该框架使用强化学习来训练一个模拟的人形来模仿各种各样的动作技能”。</p><p>github地址：<a href="https://github.com/xbpeng/DeepMimic" target="_blank" rel="noopener">https://github.com/xbpeng/DeepMimic</a></p><h3 id="6、Bonus-AdaNet-by-Google-AI"><a href="#6、Bonus-AdaNet-by-Google-AI" class="headerlink" title="6、Bonus: AdaNet by Google AI"></a><strong>6、Bonus: AdaNet by Google AI</strong></h3><p><img src="https://mmbiz.qpic.cn/mmbiz_png/CicicOQ3m1WpcibUib4Otia5zZlkRmkRR1aJlysOenibIYzWbaZCiakBS4IbbjiaMxyqpPQiaibEes9rvO6mDicgT4n1JuCyg/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>AdaNet是一个轻量级的、可伸缩的基于tensorflow的框架，用于自动学习高质量的模型。最好的一点是，您不需要过多的干预——框架足够智能和灵活，可以构建更好的模型。</p><p>github地址：<a href="https://github.com/tensorflow/adanet" target="_blank" rel="noopener">https://github.com/tensorflow/adanet</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>券商研报地址</title>
      <link href="/%E5%88%B8%E5%95%86%E7%A0%94%E6%8A%A5%E5%9C%B0%E5%9D%80/"/>
      <url>/%E5%88%B8%E5%95%86%E7%A0%94%E6%8A%A5%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<p>个人小轮子。<br><a id="more"></a></p><h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h2><p><a href="/report/10000082_0.html">国金证券</a><br><a href="/report/10001055_0.html">国海证券</a><br><a href="/report/10001081_0.html">长江证券</a></p><p><a href="/report/80000081_0.html">东莞证券</a><br><a href="/report/80000091_0.html">东方证券</a><br><a href="/report/80000123_0.html">国泰君安</a><br><a href="/report/80000124_0.html">天风证券</a><br><a href="/report/80000126_0.html">东方财富证券</a><br><a href="/report/80000140_0.html">财富证券</a><br><a href="/report/80000157_0.html">中泰证券</a><br><a href="/report/80000202_0.html">华创证券</a><br><a href="/report/80000206_0.html">浙商证券</a><br><a href="/report/80000214_0.html">国盛证券</a><br><a href="/report/80045894_0.html">新时代</a><br><a href="/report/80050806_0.html">太平洋</a><br><a href="/report/80066058_0.html">中信建投</a><br><a href="/report/80114781_0.html">东兴证券</a><br><a href="http://data.eastmoney.com/report/80000002_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000002_0.html</a> 大同证券<br><a href="http://data.eastmoney.com/report/80000003_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000003_0.html</a> 中山证券<br><a href="http://data.eastmoney.com/report/80000004_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000004_0.html</a> 广州证券<br><a href="http://data.eastmoney.com/report/80000007_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000007_0.html</a> 国信证券<br><a href="http://data.eastmoney.com/report/80000008_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000008_0.html</a> 华泰联合证券<br><a href="http://data.eastmoney.com/report/80000012_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000012_0.html</a> 招商证券<br><a href="http://data.eastmoney.com/report/80000028_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000028_0.html</a> 国联证券<br><a href="http://data.eastmoney.com/report/80000031_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000031_0.html</a> 东吴证券<br><a href="http://data.eastmoney.com/report/80000033_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000033_0.html</a> 长城国瑞证券<br><a href="http://data.eastmoney.com/report/80000037_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000037_0.html</a> 平安证券<br><a href="http://data.eastmoney.com/report/80000038_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000038_0.html</a> 民生证券<br><a href="http://data.eastmoney.com/report/80000045_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000045_0.html</a> 恒泰证券<br><a href="http://data.eastmoney.com/report/80000048_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000048_0.html</a> 华西证券<br><a href="http://data.eastmoney.com/report/80000049_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000049_0.html</a> 华鑫证券<br><a href="http://data.eastmoney.com/report/80000051_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000051_0.html</a> 南京证券<br><a href="http://data.eastmoney.com/report/80000057_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000057_0.html</a> 红塔证券<br><a href="http://data.eastmoney.com/report/80000063_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000063_0.html</a> 中信证券(山东)<br><a href="http://data.eastmoney.com/report/80000064_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000064_0.html</a> 华安证券<br><a href="http://data.eastmoney.com/report/80000065_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000065_0.html</a> 华福证券<br><a href="http://data.eastmoney.com/report/80000067_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000067_0.html</a> 兴业证券<br><a href="http://data.eastmoney.com/report/80000068_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000068_0.html</a> 方正证券<br><a href="http://data.eastmoney.com/report/80000069_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000069_0.html</a> 东海证券<br><a href="http://data.eastmoney.com/report/80000073_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000073_0.html</a> 华泰证券<br><a href="http://data.eastmoney.com/report/80000074_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000074_0.html</a> 光大证券<br><a href="http://data.eastmoney.com/report/80000075_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000075_0.html</a> 申万宏源<br><a href="http://data.eastmoney.com/report/80000076_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000076_0.html</a> 湘财证券<br><a href="http://data.eastmoney.com/report/80000080_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000080_0.html</a> 山西证券<br><a href="http://data.eastmoney.com/report/80000081_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000081_0.html</a> 东莞证券<br><a href="http://data.eastmoney.com/report/80000082_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000082_0.html</a> 长城证券<br><a href="http://data.eastmoney.com/report/80000083_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000083_0.html</a> 第一创业<br><a href="http://data.eastmoney.com/report/80000084_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000084_0.html</a> 华林证券<br><a href="http://data.eastmoney.com/report/80000085_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000085_0.html</a> 英大证券<br><a href="http://data.eastmoney.com/report/80000091_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000091_0.html</a> 东方证券<br><a href="http://data.eastmoney.com/report/80000095_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000095_0.html</a> 国都证券<br><a href="http://data.eastmoney.com/report/80000113_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000113_0.html</a> 国开证券<br><a href="http://data.eastmoney.com/report/80000118_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000118_0.html</a> 联讯证券<br><a href="http://data.eastmoney.com/report/80000119_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000119_0.html</a> 群益证券<br><a href="http://data.eastmoney.com/report/80000121_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000121_0.html</a> 国泰君安香港<br><a href="http://data.eastmoney.com/report/80000122_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000122_0.html</a> 首创证券<br><a href="http://data.eastmoney.com/report/80000123_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000123_0.html</a> 国泰君安<br><a href="http://data.eastmoney.com/report/80000124_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000124_0.html</a> 天风证券<br><a href="http://data.eastmoney.com/report/80000122_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000122_0.html</a> 首创证券<br><a href="http://data.eastmoney.com/report/80000123_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000123_0.html</a> 国泰君安<br><a href="http://data.eastmoney.com/report/80000124_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000124_0.html</a> 天风证券<br><a href="http://data.eastmoney.com/report/80000126_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000126_0.html</a> 东方财富证券<br><a href="http://data.eastmoney.com/report/80000133_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000133_0.html</a> 五矿证券<br><a href="http://data.eastmoney.com/report/80000134_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000134_0.html</a> 华金证券<br><a href="http://data.eastmoney.com/report/80000135_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000135_0.html</a> 中国银河<br><a href="http://data.eastmoney.com/report/80000139_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000139_0.html</a> 西部证券<br><a href="http://data.eastmoney.com/report/80000140_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000140_0.html</a> 财富证券<br><a href="http://data.eastmoney.com/report/80000145_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000145_0.html</a> 大通证券<br><a href="http://data.eastmoney.com/report/80000147_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000147_0.html</a> 民族证券<br><a href="http://data.eastmoney.com/report/80000150_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000150_0.html</a> 宏信证券<br><a href="http://data.eastmoney.com/report/80000155_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000155_0.html</a> 上海证券<br><a href="http://data.eastmoney.com/report/80000156_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000156_0.html</a> 华龙证券<br><a href="http://data.eastmoney.com/report/80000157_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000157_0.html</a> 中泰证券<br><a href="http://data.eastmoney.com/report/80000162_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000162_0.html</a> 开源证券<br><a href="http://data.eastmoney.com/report/80000165_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000165_0.html</a> 财达证券<br><a href="http://data.eastmoney.com/report/80000180_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000180_0.html</a> 渤海证券<br><a href="http://data.eastmoney.com/report/80000181_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000181_0.html</a> 世纪证券<br><a href="http://data.eastmoney.com/report/80000187_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000187_0.html</a> 万联证券<br><a href="http://data.eastmoney.com/report/80000189_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000189_0.html</a> 金元证券<br><a href="http://data.eastmoney.com/report/80000197_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000197_0.html</a> 中航证券<br><a href="http://data.eastmoney.com/report/80000199_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000199_0.html</a> 爱建证券<br><a href="http://data.eastmoney.com/report/80000200_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000200_0.html</a> 中银国际证券<br><a href="http://data.eastmoney.com/report/80000202_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000202_0.html</a> 华创证券<br><a href="http://data.eastmoney.com/report/80000204_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000204_0.html</a> 川财证券<br><a href="http://data.eastmoney.com/report/80000205_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000205_0.html</a> 万和证券<br><a href="http://data.eastmoney.com/report/80000206_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000206_0.html</a> 浙商证券<br><a href="http://data.eastmoney.com/report/80000208_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000208_0.html</a> 华宝证券<br><a href="http://data.eastmoney.com/report/80000213_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000213_0.html</a> 恒泰长财证券<br><a href="http://data.eastmoney.com/report/80000214_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000214_0.html</a> 国盛证券<br><a href="http://data.eastmoney.com/report/80000217_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000217_0.html</a> 德邦证券<br><a href="http://data.eastmoney.com/report/80000218_0.html" target="_blank" rel="noopener">http://data.eastmoney.com/report/80000218_0.html</a> 中原证券</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">urls=[<span class="string">'http://data.eastmoney.com/report/80000&#123;&#125;_0.html'</span>.format(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>,<span class="number">1000</span>)]</span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        re=requests.get(url).text</span><br><span class="line">        se=etree.HTML(re)</span><br><span class="line">        ins=se.xpath(<span class="string">'//div[@class="tit"]/text()'</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        print(url,ins)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> achieve </tag>
            
            <tag> web </tag>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习笔记：NLTK</title>
      <link href="/2018%E5%B9%B412%E6%9C%888%E6%97%A5/"/>
      <url>/2018%E5%B9%B412%E6%9C%888%E6%97%A5/</url>
      
        <content type="html"><![CDATA[<p>读书笔记：NLTK基础教程——用NLTK和Python库构建机器学习应用。<br><a id="more"></a></p><h1 id="书目"><a href="#书目" class="headerlink" title="书目"></a>书目</h1><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p>NLP入门（前几章）<br>《Speech and Language Processing》，由Daniel Jurafsky与James H. Martin合著。<br>《Statistical Natural Language Processing》，由Christopher D. Manning与Hinrich Schütze合著<br>维基百科上与NLP相关的页面。<a href="https://en.wikipedia.org/wiki/NLP" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/NLP</a></p><h1 id="残留"><a href="#残留" class="headerlink" title="残留"></a>残留</h1><p>help()是不是只能用于str和list。<br>答：否。dir(dict)以及import后再help。</p><h1 id="最"><a href="#最" class="headerlink" title="最"></a>最</h1><p>NLTK 库是当前自然语言处理（NLP）领域最为流行、使用最为广泛的库之一, 同时Python语言也已逐渐成为主流的编程语言之一。<br>关于这个问题，我们可以先来看看Gartner公司新一轮的趋势报告，你可以很清晰地看到，NLP技术赫然高居榜首。目前，NLP已被认为是业界最为稀缺的技能之一。<br>列表（list）是Python中最常用的数据结构之一。它们基本上相当于其他编程语言中的数组。<br>字典（dictionary）也是最常用到的数据结构之一。在其他编程语言中有时也被称为关联数组/存储。<br>字符串操作同时也是Python最主要的特性之一。</p><ul><li>在Python中，处理字符串会是一件非常轻松的工作。即使是那些非常简单的操作，例如字符串的切割，你也会看到相较于Java和C的大费周章，它在Python中是多么得简单明了。<h1 id="练级"><a href="#练级" class="headerlink" title="练级"></a>练级</h1>兴趣读者、爱好者、资深程序员、领域的研究人员、数据科学家。掌握一些NLP技能的人员。<h1 id="掌握技能"><a href="#掌握技能" class="headerlink" title="掌握技能"></a>掌握技能</h1><h2 id="理论：快速了解与一定的兴趣"><a href="#理论：快速了解与一定的兴趣" class="headerlink" title="理论：快速了解与一定的兴趣"></a>理论：快速了解与一定的兴趣</h2>编程语言、NLTK、NLP和语言学<br>python：基础教程、快速概览、快速浏览一下Python的基础要点（基础性的快速回顾之旅）、不同主题的Python的一些特性。基本的Python知识，如列表、字符串、正则表达式以及基本的I/O操作。<br><a href="#help">help and dir</a> <a href="#列表">列表</a><br>数据结构的基本知识，常用函数，Python通用结构。<br>对NLP爱好者来说，正则表达式是另一个非常重要的技能。<br>NLP：背景知识、相关概念、实用方面<br>###<br>在NLP领域以及使用Python编程方面具有一定的背景知识<br>与Python和NLP相关的快速入门<br>详细地了解Python这门语言<br>NLP相关的基本概念<br>与处理自然语言相关的特性<br>基本的NLP预处理步骤<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2>如何安装所需要的库。完成Python和NLTK及其他库的安装。安装了所有在NLTK工作中将会用到的程序。<br>pip install BeautifulSoup4 –user<br>演示了NLTK的使用思路<br>编写一些非常基本的Python和NLTK代码片段。能编写并运行基本的Python程序。<br>自行构建出一个能实际运行的、涉及云词的小型应用程序。<br>开始构建一个非常基本的单词云实例。能顺利地产生出云词。<br>如何构建一些NLP应用。构建出大部分与数据科学相关问题的单点解决方案。<br>围绕着NLTK构建起所需要的一切，并让Python在我们的系统上顺利地工作。<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2>探索性数据分析（EDA）。<br>通常对于一段文本域而言，EDA可能包含了多重含义。<br>文档的主体术语类型是其中的一个简单用例。<br>主题是什么？<br>它们的出现频率如何？<br>整个分析过程还会或多或少地涉及一些预处理层面的步骤。<br>试着先用纯Python的方式来实现它，然后用NLTK再将其实现一次。<br>清理掉html标签。<br>一种可行的做法是只选取其中的标记，包括数字和字符。<br>正则表达式可以轻松地将这些html字符串转换成一个标记列表。</li></ul><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>NLTK、文本处理、NLP、机器学习、数据科学领域<br>信息检索、分布式处理、本体开发、自然语言处理和机器学习<br>NLTK库与Python库。其他的Python库，你应该了解一下这些与文本挖掘或自然语言处理任务相关的库。<br>NLP任务和机器学习应用<br>通用的预处理技术、专属于NLP领域的预处理技术以及命名实体识别技术<br>文本分类、数据科学和数据处理、社交媒体挖掘和大规模文本挖掘<br>标识化处理、语块分解、词性标注、语法解析、机器翻译及语音识别<br>语言处理及大型非结构化数据<br>一些相关特定能力的Python库，如NLTK、scikit-learn、panda和NumPy<br>基础数据科学、机器学习起步<br>文本分析、网页抓取及检索、人力资源分析、虚拟系统的性能优化，以及气候变化的预测<br>路径名、文件夹名、文件名、文件扩展名、伪URL<br>数据库表名<br>用户输入以及Twitter句柄、代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">文本的歧义及其清理</span><br><span class="line">    通用的预处理技术。在任何文本挖掘和NLP任务中所需的所有预处理步骤。</span><br><span class="line">        断词处理、词干处理、停用词去除。</span><br><span class="line">        例如标识化处理（tokenization）、词干提取（stemming）、停用词（stop word）去除；</span><br><span class="line">        本清理技术，如何用NLTK来简化它们的实现。</span><br><span class="line">    专属于NPL领域的预处理技术等，</span><br><span class="line">        如词性标注（part-of-speech tagging）；以及大多数文本相关的NLP任务都会涉及的命名实体识别（Named-entity recognition，简称NER）等技术。</span><br><span class="line">    更为复杂的NLP任务上，例如语法解析（parsing）以及其他NLP应用。</span><br><span class="line">    NLP应用:</span><br><span class="line">        如何进行文本分类，可以用NLTK搭配scikit-learn库来进行。</span><br><span class="line">        如何从网页和社交媒体中采集数据</span><br><span class="line">        如何用NLTK进行大规模的文本处理</span><br><span class="line">自然语言处理简介</span><br></pre></td></tr></table></figure></p><h1 id="词条"><a href="#词条" class="headerlink" title="词条"></a>词条</h1><p>解释型编程语言，会在对其表达式进行计算的同时检查其中的变量类型。在声明变量时无需对其进行初始化和类型声明。例如：Python。<br>对语言有深入研究的人通常被叫作语言学家。<br>而“计算机语言学家”这个专用名词则指的是将计算机科学应用于语言处理领域的人。<br>因此从本质上来说，一个计算机语言学家应该既有足够的语言理解能力，同时还可以用其计算机技能来模拟出语言的不同方面。<br>虽然计算机语言学家主要研究的是语言处理理论，但NLP无疑是对计算机语言学的具体应用。</p><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典是一种键值索引型的数据结构，其索引键可以是任意一种不可变的类型，例如字符串和数字都经常被用来充当索引键。<br>字典是被多种编程语言广泛用于实现诸多算法的一种非常便利的数据结构。<br>而且，Python的字典结构还是所有的这些编程语言中最为优雅的哈希表实现之一。</p><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>哈希表是一种操作起来非常容易的字典结构，其优势在于，你只需通过寥寥几段代码就可以用它建立起一个非常复杂的数据结构。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>而所有类似于其他编程语言中的参数和参数类型的声明都会被放在该括号内。Python也有自己的函数编写方式。<br>从大型程序的编写实践来说，使用函数/类和某种成熟的编程范式是一个更佳的做法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> &lt;函数名&gt;<span class="params">()</span>:</span></span><br></pre></td></tr></table></figure></p><p>在Python中，<br>    函数的定义通常会从关键字def开始，<br>    后面紧跟着相应的函数名和括号()。<br>    实际代码部分将会从冒号（:）后面开始，<br>        代码的初始行通常会是一个文档字符串（注释），<br>        接着是代码的主体部分，<br>        最后我们会以一个return语句来结束整个函数。</p><h2 id="NLP"><a href="#NLP" class="headerlink" title="NLP"></a>NLP</h2><p>在英语环境中，语言处理研究这一领域通常被简称为NLP。<br>NLP多数情况下指的是计算机上各种大同小异的语言处理应用，以及用NLP技术所构建的实际应用程序。<br>在实践中，NLP与教孩子学语言的过程非常类似。<br>其大多数任务（如对单词、语句的理解，形成语法和结构都正确的语句等）对于人类而言都是非常自然的能力。<br>但对于NLP来说，其中有一些任务就必须要转向<a href="#分类">文本分析</a><br>等这些领域的一部分，且这些任务有一大部分还仍是当前计算机领域中非常棘手的挑战。<br>自大数据的概念问世之后，我们所面对的主要挑战是——业界需要越来越多不仅能处理结构化数据，同时也能处理半结构化或非结构化数据的人才。<br>对于我们所生产出来的那些博客、微博、Facebook订阅、聊天信息、E-mail以及网络评论等，各公司都在致力于收集所有不同种类的数据，以便建立更好的客户针对性，形成有意义的见解。<br>而要想处理所有的这些非结构化数据源，我们就需要掌握一些NLP技能的人员。</p><h3 id="NLP工具清单"><a href="#NLP工具清单" class="headerlink" title="NLP工具清单"></a>NLP工具清单</h3><p>这些工具有些是由相关组织在建立自己的NLP应用时开发的，而有些则纯粹属于开源项目：<br>    GATE。<br>    Mallet。<br>    Open NLP。<br>    UIMA。<br>    Stanford toolkit。<br>    Genism。<br>    Natural Language Tool Kit (NLTK)<br>上述大多数工具都是用Java编写的，在功能上也都很相似。强大实用。</p><h3 id="现实应用"><a href="#现实应用" class="headerlink" title="现实应用"></a>现实应用</h3><p>拼写校正（MS Word/其他编辑器）<br>搜索引擎（Google、Bing、Yahoo!、WolframAlpha）。<br>语音引擎（Siri、Google Voice）。<br>垃圾邮件分类（所有电子邮件服务）。垃圾过滤器来过滤垃圾邮件<br>新闻订阅（Google、Yahoo!等）。<br>机器翻译（Google翻译与其他类似服务）。<br>IBM Watson<br>最基本的事情用到Siri</p><p><img src="https://upload-images.jianshu.io/upload_images/6908911-6c01a13213e00401.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="停用词"><a href="#停用词" class="headerlink" title="停用词"></a>停用词</h2><p>无用词。由于冠词、代词在大多数文档中都是普遍存在的，因而对信息的识别没有帮助。<br>a an the<br>of for =<br>在大多数NLP及信息检索任务中，人们通常都会先删除掉这些停用词。</p><h2 id="NLTK"><a href="#NLTK" class="headerlink" title="NLTK"></a>NLTK</h2><p>NLTK的设计充分体现了简单的魅力。也就是说，对于大多数复杂的NLP任务，它都可以用寥寥几行代码来实现。<br>NLTK：易用性（NLTK库是一个非常易学的工具包）和其对相关概念的解释度。<br>这得益于Python本身非常平缓的学习曲线（毕竟NLTK是用它编写的），人们学习起来会非常快。<br>NLTK库中收纳了NLP领域中的绝大部分任务，它们都被实现得非常优雅，且易于使用。<br>正是出于上述的这些原因，NLTK如今已成为了NLP社区最流行的库之一。</p><h2 id="图灵测试"><a href="#图灵测试" class="headerlink" title="图灵测试"></a>图灵测试</h2><p>图灵测试关注的是人机对话能力，换句话说，什么时候机器能通过对话骗到你的一百块钱，也比它下棋下赢世界冠军更智能点。而想要增强人机对话能力，自然语言处理就是首当其冲的一个领域了。正如我们所说，机器的专长是数学领域，所以自然语言处理问题的目的就是要把我们人类的文本、音频转换成可被分析的数学模型，这对于机器来说是比围棋困难得多的事情。这也是人类和机器的根本区别，对于这两种智能来说，困难的定义是截然不同的。</p><h2 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h2><h3 id="Nitin-Hardeniya"><a href="#Nitin-Hardeniya" class="headerlink" title="Nitin Hardeniya"></a>Nitin Hardeniya</h3><p>Nitin Hardeniya数据科学家，拥有4年以上从业经验，期间分别任职于Fidelity、Groupon和[24]7等公司，其业务横跨各个不同的领域。此外，他还拥有IIIT-H的计算语言学硕士学位，并且是5项客户体验专利的作者。<br>他热衷于研究语言处理及大型非结构化数据，至少拥有5年日常使用Python的工作经验。他相信，用Python可以构建出大部分与数据科学相关问题的单点解决方案。<br>他将自己写这本书的经历看成是自己职业生涯的众多荣誉之一，希望用一种非常简单的形式为人们介绍与NLP和机器学习相关的、所有的这些复杂工具。在这本书中，他为读者提供了一种变通方法，即使用一些相关特定能力的Python库，如NLTK、scikit-learn、panda和NumPy等。<br>《NLTK基础教程——用NLTK和Python库构建机器学习应用》作者</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>审阅者简介Afroz Hussain数据科学家，目前在PredictifyMe公司从事与美国基础数据科学、机器学习起步相关的研究。他在数据科学领域拥有丰富的项目经验、多年使用Python、scikit-learn，以及基于NLTK进行文本挖掘的工作经历。他拥有10年以上的编程经验以及与数据分析和商业智能项目相关的软件开发经验。此外，他还通过在线课程以及参加Kaggle比赛等活动，获得了不少数据科学领域的新技能。<br>Sujit Pal目前就职于[[Elsevier实验室]]，这是一个包含了[[Reed-Elsevier PLC工作组]]在内的研发团队。他的兴趣主要集中在信息检索、分布式处理、本体开发、自然语言处理和机器学习这几个领域。而且，他也很喜欢用Python、Scala和Java来编写自己的代码。他充分整合了自己在这些方面的技能，帮助公司改进了不同产品的一些特性并构建了一些新特性。他深信自己需要终身学习，并且也在博客：sujitpal.blogspot.com中分享其经验。<br>Kumar Raj第二代数据科学家，目前就职于惠普软件的研发部门，为其提供相关的解决方案。在那里，他主要负责开发以惠普软件产品为核心的分析层。他毕业于印度理工学院Kharagpur技术分校，并具有两年以上各种大数据分析领域的工作经验，涉及文本分析、网页抓取及检索、人力资源分析、虚拟系统的性能优化，以及气候变化的预测等</p><h1 id="需要累积"><a href="#需要累积" class="headerlink" title="需要累积"></a>需要累积</h1><p>N年使用Python的工作经验经历<br>在数据科学领域拥有丰富的项目经验<br>编程经验<br>数据分析和商业智能项目相关的软件开发经验<br>充分整合了自己的技能<br>帮助公司改进了不同产品的一些特性并构建了一些新特性</p><h1 id="社会现象"><a href="#社会现象" class="headerlink" title="社会现象"></a>社会现象</h1><p>说来也凑巧，在我签下这本书的翻译合同时，这个世界好像还不知道AlphaGo的存在。而在我完成这本书的翻译之时，Master已经对人类顶级高手连胜60局了。至少从媒体的热度来看，的确在近几年，人工智能似乎是越来越火了。其原因是Google在汽车驾驶和围棋这两个领域的项目得到了很好的进展和宣传，而这两个领域在过去被很多人想当然地认为是人类的专属领域。因此在专属领域接连被突破情况下，一些人得了“机器恐惧症”。例如高晓松先生的这段微博：</p><p><blockquote><br>@高晓松　<br>作为自幼学棋，崇拜国手的业余棋手，看了Master50 : 0横扫中日韩顶尖高手的对局，难过极了。为所有的大国手伤心，路已经走完了。多少代大师上下求索，求道求术，全被破解。未来一个八岁少年只要一部手机就可以战胜九段，荣誉信仰灰飞烟灭。等有一天，机器做出了所有的音乐和诗歌，我们的路也会走完。<br>1月4日　16:21　来自　iPhone 7 Plus<br></blockquote><br>其实之所以会有这样恐惧，大部分是因为人们在讨论人工智能的时候容易将机器“人格化”，很多科幻作品就是这么干的，这看起来很合理，但问题是机器无论如何都不是人。对于机器来说，围棋说穿了不过是一种基于统计学概率的决策模型，属于数学领域的问题，它本来就是机器的强项。用围棋对于人类的难度来推导机器智能的进步，其实是很没有逻辑的事情。而且事实上，今天所流行的这些人工智能方法都是在20世纪70年代前后提出的理论，今天的辉煌主要是由于硬件的进步为实现提供了基础，但在智能上并没有多大的实质突破。要知道，人们对于鉴定人工智能的主要标准早有定论，那就是图灵测试</p><h1 id="套话"><a href="#套话" class="headerlink" title="套话"></a>套话</h1><p>众所周知，语言是人们日常生活的核心部分，任何与语言问题相关的工作都会显得非常有意思。希望这本书能带你领略到NLP的风采，并引起学习NLP的兴趣。首先，我们需要来了解一下该领域中的一些令人惊叹的概念，并在工作中实际尝试一些具有挑战性的NLP应用。<br>身处信息时代，我们甚至不能想象生活中没有Google会是什么样子。<br>在这里，我们可以再列举一些令人惊叹的NLP应用实例。<br>构建上述这些应用都需要非常具体的技能，需要优秀的语言理解能力和能有效处理这些语言的工具。因此，这些不仅是各NLP最具优势领域的未来趋势，同时也是我们用NLP这种最独特技能所能创建的应用种类</p>]]></content>
      
      
      
        <tags>
            
            <tag> fix </tag>
            
            <tag> ML </tag>
            
            <tag> 文本分析 </tag>
            
            <tag> NLP </tag>
            
            <tag> packtpub </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>packtpub</title>
      <link href="/packtpub/"/>
      <url>/packtpub/</url>
      
        <content type="html"><![CDATA[<p>出版社<br><a id="more"></a></p><h2 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h2><p>在<a href="http://www.packtpub.com" target="_blank" rel="noopener">http://www.packtpub.com</a> 自己的账户页面中找到所有已购买的Packt图书，并下载相关的实例代码。<br>别处购买的图书，通过访问 <a href="http://www.packtpub.com/support" target="_blank" rel="noopener">http://www.packtpub.com/support</a> 注册有关文件，电子邮件查收代码</p><h2 id="读者反馈"><a href="#读者反馈" class="headerlink" title="读者反馈"></a>读者反馈</h2><p>出书：你对某一话题有专长，并且有兴趣写（或奉献）一本这方面的书，请参考我们的作者指南：<a href="http://www.packtpub.com/authors。" target="_blank" rel="noopener">www.packtpub.com/authors。</a><br>反馈：一般的反馈，给<a href="mailto:feedback@packtpub.com" target="_blank" rel="noopener">feedback@packtpub.com</a>发一份电子邮件，并在邮件的标题中注明这本书的书名<br>疑问：有疑问，联系<a href="mailto:questions@packtpub.com" target="_blank" rel="noopener">questions@packtpub.com</a><br>版权：怀疑有侵权行为的文档链接发送到：<a href="mailto:copyright@packetpub.com" target="_blank" rel="noopener">copyright@packetpub.com</a><br>纠错：发现错误时，访问<a href="http://www.packtpub.com/submit-errata，选择相应的书名，然后单击“errata" target="_blank" rel="noopener">http://www.packtpub.com/submit-errata，选择相应的书名，然后单击“errata</a> submissionorm”链接并输入相关错误的详细信息<br>查记录：查看先前已提交的勘误信息，访问 <a href="https://www.packtpub.com/books/" target="_blank" rel="noopener">https://www.packtpub.com/books/</a> content/support，并在其搜索域中输入相关图书的名称</p><h1 id="版权"><a href="#版权" class="headerlink" title="版权"></a>版权</h1><h2 id="Packet"><a href="#Packet" class="headerlink" title="Packet"></a>Packet</h2><p>在互联网上，版权对于所有媒介而言一直是一个很大的问题。在Packet，我们向来对于版权许可非常重视。如果你在网络上发现任何形式的我们出版过的作品，都请马上将网址或网站名称告知我们，以便于我们采取补救措施。<br>你付出的帮助是对作者权利的保护，我们也由此才能继续为你带来有价值的内容。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> one </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>机器学习网址资源</title>
      <link href="/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BD%91%E5%9D%80%E8%B5%84%E6%BA%90/"/>
      <url>/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BD%91%E5%9D%80%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p>资源<br><a id="more"></a></p><h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><p>Anaconda或Canopy的Python发行版本身就具备了一些捆绑库，如SciPy、numpy、scikit等，它们可用于数据分析及其他与NLP相关领域的应用。</p><h2 id="优质教程"><a href="#优质教程" class="headerlink" title="优质教程"></a>优质教程</h2><p>《Google Python class》的参考资料：<a href="https://developers.google.com/edu/python" target="_blank" rel="noopener">https://developers.google.com/edu/python</a><br><a href="https://wiki.python.org/moin/BeginnersGuide。" target="_blank" rel="noopener">https://wiki.python.org/moin/BeginnersGuide。</a></p><h2 id="机器学习工具箱"><a href="#机器学习工具箱" class="headerlink" title="机器学习工具箱"></a>机器学习工具箱</h2><p><a href="http://www.wordle.net/advanced" target="_blank" rel="noopener">http://www.wordle.net/advanced</a>  词云。按频率得到词云图。是在大量非结构化文本中进行可视化处理的一种好方法。也是文本分析领域中相当流行的一种运用。</p><h2 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h2><p><a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a><br><a href="https://www.anaconda.com/" target="_blank" rel="noopener">https://www.anaconda.com/</a><br><a href="http://www.nltk.org/" target="_blank" rel="noopener">http://www.nltk.org/</a><br><a href="http://www.nltk.org/install.html" target="_blank" rel="noopener">http://www.nltk.org/install.html</a>  安装说明<br><a href="https://scikit-learn.org/stable/" target="_blank" rel="noopener">https://scikit-learn.org/stable/</a><br><a href="https://radimrehurek.com/" target="_blank" rel="noopener">https://radimrehurek.com/</a><br><a href="https://scrapy.org" target="_blank" rel="noopener">https://scrapy.org</a><br><a href="http://www.numpy.org/" target="_blank" rel="noopener">http://www.numpy.org/</a><br><a href="http://www.scipy.org/" target="_blank" rel="noopener">http://www.scipy.org/</a><br><a href="https://pandas.pydata.org/" target="_blank" rel="noopener">https://pandas.pydata.org/</a><br><a href="https://matplotlib.org/" target="_blank" rel="noopener">https://matplotlib.org/</a><br><a href="https://dev.twitter.com/overview/api/twitter-libraries" target="_blank" rel="noopener">https://dev.twitter.com/overview/api/twitter-libraries</a><br><a href="https://developers.facebook.com/" target="_blank" rel="noopener">https://developers.facebook.com/</a></p><h2 id="技术博客"><a href="#技术博客" class="headerlink" title="技术博客"></a>技术博客</h2><p>sujitpal.blogspot.com</p><h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="PYTHON3添加的新特性："><a href="#PYTHON3添加的新特性：" class="headerlink" title="PYTHON3添加的新特性："></a>PYTHON3添加的新特性：</h2><p>如果你已经将项目迁移到Python 3.0+，那就务必参阅下面链接中的说明<br>    <a href="https://docs.python.org/3/whatsnew/3.4.html。" target="_blank" rel="noopener">https://docs.python.org/3/whatsnew/3.4.html。</a></p><h2 id="python版本差异"><a href="#python版本差异" class="headerlink" title="python版本差异"></a>python版本差异</h2><p>Python（建议是2.7版）、<br>GCC编译器<br>对于其他任意的开源系统来说，应该保守地选择一个更稳定的版本，而不是贸然跳到最新版本。<br>对于基于UNIX的系统，Python属于默认程序（无须任何设置）。而Windows用户则需要通过设置相关路径来使Python进入正常工作状态。</p><h2 id="确认某包是否被安装"><a href="#确认某包是否被安装" class="headerlink" title="确认某包是否被安装"></a>确认某包是否被安装</h2><p>import &lt;包名&gt;</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>代码样式</title>
      <link href="/%E4%BB%A3%E7%A0%81%E6%A0%B7%E5%BC%8F/"/>
      <url>/%E4%BB%A3%E7%A0%81%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>很难吗。<br><a id="more"></a></p><h1 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h1><p>Python代码块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;import nltk</span><br><span class="line">&gt;&gt;&gt;import numpy</span><br></pre></td></tr></table></figure></p><p>一般性的代码块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add FILE vectorizer.pkl;</span><br><span class="line">add FILE classifier.pkl;</span><br></pre></td></tr></table></figure></p><p>Scrapy shell中的IPython 记法，其样式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [1] : sel.xpath(&apos;//title/text()&apos;)</span><br><span class="line">Out[1]: [&lt;Selector xpath=&apos;//title/text()&apos; data=u&apos; Google News&apos;&gt;]</span><br></pre></td></tr></table></figure></p><p>所有命令行输入或输出信息的样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cp /usr/src/asterisk-addons/configs/cdr_mysql.conf.sample</span><br><span class="line">     /etc/asterisk/cdr_mysql.conf</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> fix </tag>
            
            <tag> one </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>清洗+词频统计+排序+nltk+可视化</title>
      <link href="/%E6%B8%85%E6%B4%97+%E8%AF%8D%E9%A2%91%E7%BB%9F%E8%AE%A1+%E6%8E%92%E5%BA%8F+nltk+%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/%E6%B8%85%E6%B4%97+%E8%AF%8D%E9%A2%91%E7%BB%9F%E8%AE%A1+%E6%8E%92%E5%BA%8F+nltk+%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>学习笔记：机器学习之NLTK<br><a id="more"></a></p><h3 id="词频统计"><a href="#词频统计" class="headerlink" title="词频统计"></a>词频统计</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str1=<span class="string">'Hello Python. I like Python.'</span></span><br><span class="line">word_freq=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> tok <span class="keyword">in</span> str1.split():</span><br><span class="line">    <span class="keyword">if</span> tok <span class="keyword">in</span> word_freq:</span><br><span class="line">        word_freq[tok]+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        word_freq[tok]=<span class="number">1</span></span><br><span class="line">print(word_freq)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;<span class="string">'Hello'</span>: <span class="number">1</span>, <span class="string">'Python.'</span>: <span class="number">2</span>, <span class="string">'I'</span>: <span class="number">1</span>, <span class="string">'like'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="要点："><a href="#要点：" class="headerlink" title="要点："></a>要点：</h4><p><code>for tok in str1.split():</code> 注意in 后面接了个返回列表的函数。<br><code>if tok in word_freq:</code> 键是如何作用于字典的。<br><code>word_freq[tok]+=1</code> 字典是如何用键操作值的。</p><h3 id="函数式统计词频"><a href="#函数式统计词频" class="headerlink" title="函数式统计词频"></a>函数式统计词频</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordfreq</span><span class="params">(str1)</span>:</span></span><br><span class="line">    word_freq=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> tok <span class="keyword">in</span> str1.split():</span><br><span class="line">        <span class="keyword">if</span> tok <span class="keyword">in</span> word_freq:</span><br><span class="line">            word_freq[tok]+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            word_freq[tok]=<span class="number">1</span></span><br><span class="line">    print(word_freq)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    str1=<span class="string">'Hello Python. I like Python.'</span></span><br><span class="line">    wordfreq(str1)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>等价于<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordfreq</span><span class="params">(str1)</span>:</span></span><br><span class="line">    word_freq=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> tok <span class="keyword">in</span> str1.split():</span><br><span class="line">        <span class="keyword">if</span> tok <span class="keyword">in</span> word_freq:</span><br><span class="line">            word_freq[tok]+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            word_freq[tok]=<span class="number">1</span></span><br><span class="line">    print(word_freq)</span><br><span class="line">str1=<span class="string">'Hello Python. I like Python.'</span></span><br><span class="line">wordfreq(str1)</span><br></pre></td></tr></table></figure></p><h3 id="python官网网站源码"><a href="#python官网网站源码" class="headerlink" title="python官网网站源码"></a>python官网网站源码</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">HtmlText</span><span class="params">(url0)</span>:</span></span><br><span class="line">    html0 = requests.get(url).text</span><br><span class="line">    <span class="keyword">return</span> html0</span><br><span class="line">url=<span class="string">'http://python.org/'</span></span><br><span class="line">html = HtmlText(url)</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure><h3 id="清理数据"><a href="#清理数据" class="headerlink" title="清理数据"></a>清理数据</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">HtmlText</span><span class="params">(url0)</span>:</span></span><br><span class="line">    html0 = requests.get(url).text</span><br><span class="line">    <span class="keyword">return</span> html0</span><br><span class="line">url = <span class="string">'http://python.org/'</span></span><br><span class="line">html = HtmlText(url)</span><br><span class="line"><span class="comment"># print(html)</span></span><br><span class="line"><span class="comment"># ~~~~~~~~~~数据清理~~~~~~~~~~~</span></span><br><span class="line"><span class="comment">#==================普通分割str.split===============</span></span><br><span class="line"><span class="comment"># tokens = [tok for tok in html.split()]  #可直接运行</span></span><br><span class="line"><span class="comment">#==================正则分割re.split================</span></span><br><span class="line"><span class="comment">#-----------------\W匹配任意非单词性字符---------</span></span><br><span class="line"><span class="comment"># import re</span></span><br><span class="line"><span class="comment"># tokens = [tok for tok in re.split('\W+',html)] #可直接运行</span></span><br><span class="line"><span class="comment">#==================NLTK的clean_html================</span></span><br><span class="line"><span class="comment">#!!!!! 报错</span></span><br><span class="line"><span class="comment">#import nltk </span></span><br><span class="line"><span class="comment"># clean = nltk.clean_html(html)</span></span><br><span class="line"><span class="comment"># NotImplementedError: To remove HTML markup, use BeautifulSoup’s get_text() function，</span></span><br><span class="line"><span class="comment"># 原因是BeautifulSoup在相同方面做出了更好的成果之后，nltk自己删除了相应的同类函数，</span></span><br><span class="line"><span class="comment"># 可以用BeautifulSoup中的相应函数进行替代，所以上图的代码可以改为</span></span><br><span class="line"><span class="comment">#!!!!!</span></span><br><span class="line"><span class="comment">#==================bs4的get_text================</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">tokens = [tok <span class="keyword">for</span> tok <span class="keyword">in</span> BeautifulSoup(html,<span class="string">'lxml'</span>).get_text().split()]</span><br><span class="line"><span class="comment"># ~~~~~~~~~~清理完毕~~~~~~~~~~~</span></span><br><span class="line">print(<span class="string">'Total num of tokens:'</span>,str(len(tokens)))</span><br><span class="line">print(tokens[:<span class="number">5</span>])</span><br><span class="line"><span class="comment">#['Welcome', 'to', 'Python.org', '&#123;', '"@context":']</span></span><br></pre></td></tr></table></figure><h3 id="清洗-词频统计-排序"><a href="#清洗-词频统计-排序" class="headerlink" title="清洗+词频统计+排序"></a>清洗+词频统计+排序</h3><p>注意字典取子集与字典排序。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">HtmlText</span><span class="params">(url0)</span>:</span></span><br><span class="line">    html0 = requests.get(url).text</span><br><span class="line">    <span class="keyword">return</span> html0</span><br><span class="line">url = <span class="string">'http://python.org/'</span></span><br><span class="line">html = HtmlText(url)</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">tokens = [tok <span class="keyword">for</span> tok <span class="keyword">in</span> BeautifulSoup(html,<span class="string">'lxml'</span>).get_text().split()]</span><br><span class="line">freq_dis = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> tok <span class="keyword">in</span> tokens:</span><br><span class="line">    <span class="keyword">if</span> tok <span class="keyword">in</span> freq_dis:</span><br><span class="line">        freq_dis[tok] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        freq_dis[tok] = <span class="number">1</span></span><br><span class="line"><span class="comment">#!!!</span></span><br><span class="line"><span class="comment">#freq_dis.sort() #AttributeError:'dict' object has no attribute 'sort'</span></span><br><span class="line"><span class="comment">#!!!</span></span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line">sorted_freq_dis= sorted(freq_dis.items(), key=operator.itemgetter(<span class="number">1</span>),reverse=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment">#========dict.items(),key=key=operator.itemgetter(1)【按第二列排序】，reverse=True【从大到小】</span></span><br><span class="line">print(<span class="string">'Total num of tokens:'</span>,str(len(sorted_freq_dis)))</span><br><span class="line">print(sorted_freq_dis[:<span class="number">5</span>])</span><br><span class="line"><span class="comment">#&gt;&gt;&gt;</span></span><br><span class="line"><span class="comment">#[('Python', 54), ('&gt;&gt;&gt;', 24), ('and', 22), ('to', 18), ('the', 15)]</span></span><br></pre></td></tr></table></figure></p><h3 id="nltk-词频-可视化"><a href="#nltk-词频-可视化" class="headerlink" title="nltk+词频+可视化"></a>nltk+词频+可视化</h3><p>nltk.FreqDist 返回class<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">HtmlText</span><span class="params">(url0)</span>:</span></span><br><span class="line">    html0 = requests.get(url).text</span><br><span class="line">    <span class="keyword">return</span> html0</span><br><span class="line">url = <span class="string">'http://python.org/'</span></span><br><span class="line">html = HtmlText(url)</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">tokens = [tok <span class="keyword">for</span> tok <span class="keyword">in</span> BeautifulSoup(html,<span class="string">'lxml'</span>).get_text().split()]</span><br><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line">freq_dis_nltk = nltk.FreqDist(tokens)</span><br><span class="line">print(freq_dis_nltk)</span><br><span class="line"><span class="comment">#&lt;FreqDist with 584 samples and 1069 outcomes&gt;</span></span><br><span class="line">print(type(freq_dis_nltk)) </span><br><span class="line"><span class="comment"># &lt;class 'nltk.probability.FreqDist'&gt;</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> freq_dis_nltk.items():</span><br><span class="line">    print(k,v)</span><br><span class="line">    <span class="comment">#遗留问题：为什么没降序排列</span></span><br><span class="line">freq_dis_nltk.plot(<span class="number">10</span>)</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6908911-5c1a13d8bdc6e418.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="停用词（未实现）"><a href="#停用词（未实现）" class="headerlink" title="停用词（未实现）"></a>停用词（未实现）</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;stopwords=[word.strip().lower() <span class="keyword">for</span> word <span class="keyword">in</span> open(<span class="string">"PATH/english.stop.</span></span><br><span class="line"><span class="string">txt"</span>)]</span><br><span class="line">&gt;&gt;&gt;clean_tokens=[tok <span class="keyword">for</span> tok <span class="keyword">in</span> tokens <span class="keyword">if</span> len(tok.lower())&gt;<span class="number">1</span> <span class="keyword">and</span> (tok.</span><br><span class="line">lower() <span class="keyword">not</span> <span class="keyword">in</span> stopwords)]</span><br><span class="line">&gt;&gt;&gt;Freq_dist_nltk=nltk.FreqDist(clean_tokens)</span><br><span class="line">&gt;&gt;&gt;Freq_dist_nltk.plot(<span class="number">50</span>, cumulative=<span class="keyword">False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> code </tag>
            
            <tag> ML </tag>
            
            <tag> NLTK </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构概述——感受编程之美</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>数据结构体系<br><a id="more"></a></p><h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><p>早期人们都把计算机理解为数值计算工具,就是感觉计算机当然是用来计算的,所以计算机解决问题,应该是先从具体问题中抽象出一个适当的数据模型,设计出个解此数据模型的算法,然后再编写程序,得到一个实际的软件。<br>可现实中,我们更多的不是解决数值计算的问题,而是需要一些更科学有效的手段(比如表、树和图等数据结构)的帮助,才能更好地处理问题。所以数据结构是门研究非数值计算的程序设计问题中的操作对象,以及它们之间的关系和操作等相关问题的学科<br>1968年,美国的高德纳( Donald E. Knuth)教授在其所写的《计算机程序设计艺术》第一卷《基本算法》中,较系统地阐述了数据的逻辑结构和存储结构及其操作,开创了数据结构的课程体系。同年,数据结构作为一门独立的课程,在计算机科学的学位课程中开始出现。也就是说,那之后计算机相关专业的学生开始接受《数据结构》的“折磨”—其实应该是享受才对。<br>之后,70年代初,出现了大型程序,软件也开始相对独立,结构程序设计成为程序设计方法学的主要内容,人们越来越重视“数据结构”,认为程序设计的实质是对确定的问题选择一种好的结构,加上设计一种好的算法。可见,数据结构在程序设计当中占据了重要的地位。</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p><img src="https://upload-images.jianshu.io/upload_images/6908911-8dd32c84e607dd12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-aea8c6a097def30a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>数据:是描述客观事物的符号,是计算机中可以操作的对象,是能被计算机识别,并输入给计算机处理的符号集合。</p><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><p>这里说的数据,其实就是符号,而且这些符号必须具备两个前提：可以输入到计算机中。能被计算机程序处理。</p><h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><p>对于整型、实型等数值类型,可以进行数值计算。<br>对于字符数据类型,就需要进行非数值的处理。<br>而声音、图像、视频等其实是可以通过编码的手段变成字符数据来处理的。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型:是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。<br>数据类型是按照值的不同进行划分的。<br>在高级语言中,每个变量、常量和表达式都有各自的取值范围。类型就用来说明变量或表达式的取值范围和所能进行的操作。</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>数据类型：整型、实型等数值类型,字符（文字数据）及声音、图像、视频等非数值类型。</p><h3 id="为什么有不同的数据类型"><a href="#为什么有不同的数据类型" class="headerlink" title="为什么有不同的数据类型"></a>为什么有不同的数据类型</h3><p>当年那些设计计算机语言的人,为什么会考虑到数据类型呢?</p><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><p>在计算机中,内存也不是无限大的。<br>计算整型数字的加减乘除运算,不需要开辟很大的内存空间。<br>于是计算机的研究者们就考虑,要对数据进行分类,分出来多种数据类型。<br>比如,在C语言中变量声明inta,b,这就意味着,在给变量a和b赋值时不能超出int的取值范围,变量a和b之间的运算只能是int类型所允许的运算。</p><h4 id="底层语言与高级语言"><a href="#底层语言与高级语言" class="headerlink" title="底层语言与高级语言"></a>底层语言与高级语言</h4><p>因为不同的计算机有不同的硬件系统,这就要求程序语言最终通过编译器或解释器转换成底层语言,如汇编语言甚至是通过机器语言的数据类型来实现的。<br>实现1+2进行几次开关操作,这些操作是如何实现的。</p><h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h4><p>无论什么计算机、什么计算机语言,大都会面临着如整数运算、实数运算、字符运算等操作,我们可以考虑把它们都抽象出来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">抽象与抽象特性</span><br><span class="line">抽象：是指抽取出事物具有的普遍性的本质。它是抽出问题的特征而忽略非本质的细节,是对具体事物的一个概括。</span><br><span class="line">    抽象是一种思考问题的方式,它隐藏了繁杂的细节,只保留实现目标所必需的信息。</span><br><span class="line">    一个抽象数据类型到底需要哪些操作,这就只能由设计者根据实际需要（情况）来定。</span><br><span class="line">抽象数据类型( Abstract Data Type,ADT):是指一个数学模型及定义在该模型上的一组操作。</span><br><span class="line">    一个抽象数据类型定义了:一个数据对象、数据对象中各数据元素之间的关系及对数据元素的操作。</span><br><span class="line">    我们对已有的数据类型进行抽象,就有了抽象数据类型。</span><br><span class="line">    抽象数据类型不仅仅指那些已经定义并实现的数据类型,还可以是计算机编程者在设计软件程序时自己定义的数据类型。</span><br><span class="line">抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。</span><br><span class="line">    把实际生活中的问题分解为多个规模小且容易处理的问题,</span><br><span class="line">    然后建立一个计算机能处理的数据模型,</span><br><span class="line">    并把每个功能模块的实现细节作为一个独立的单元,</span><br><span class="line">    从而使具体实现过程隐藏起来。</span><br><span class="line">抽象数据类型的定义仅取决于它的一组逻辑特性,而与其在计算机内部如何表示和实现无关。</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6908911-4023d768ccc847ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/960" alt="数据抽象标准格式"></p><h2 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h2><p>数据对象:是性质相同的数据元素的集合,是数据的子集。<br>实际应用中,在不产生混淆的情况下,我们都将数据对象简称为数据。<br>性质相同<br>指数据元素具有相同的数据项：数量和类型。<br>比如,还是刚才的例子,人都有姓名、生日、性别等相同的数据项。</p><h3 id="数据元素（记录）"><a href="#数据元素（记录）" class="headerlink" title="数据元素（记录）"></a>数据元素（记录）</h3><p>数据元素：是组成数据的、有一定意义的基本单位,在计算机中通常作为整体处理。也被称为记录。<br>讨论问题时,数据元素才是数据结构中建立数据模型的着眼点。</p><h4 id="数据项"><a href="#数据项" class="headerlink" title="数据项"></a>数据项</h4><p>数据项:一个数据元素可以由若干个数据项组成。姓名、年龄、性别等数据项,具体有哪些数据项,要视你做的系统来决定。<br>数据项是数据不可分割的最小单位。<br>数据项是数据的最小单位。<br>把数据项定义为最小单位,是有助于更好地解决问题。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>结构是指各个组成部分相互搭配和排列的方式。在现实世界中,不同数据元素之间不是独立的,而是存在特定的关系,我们将这些关系称为结构。</p><h3 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h3><p>关系、结构、集合、组织形式。<br>数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。<br>在计算机中,数据元素并不是孤立、杂乱无序的,而是具有内在联系的数据集合。<br>数据元素之间存在的一种或多种特定关系,也就是数据的组织形式。<br>为编写出一个“好”的程序,必须分析待处理对象的特性及各处理对象之间存在的关系。</p><h4 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h4><p>逻辑结构：是指数据对象中数据元素之间的相互关系。</p><ul><li>集合结构：集合结构中的数据元素除了同属于一个集合外,它们之间没有其他关系。各个数据元素是“平等”的,它们的共同属性是“同属于一个集合”。数据结构中的集合关系就类似于数学中的集合。</li><li>线性结构：数据元素之间是一对一的关系。如不转车的地铁站。</li><li>树形结构：数据元素之间是一对多的关系。</li><li>图形结构：数据元素之间是多对多的关系。<h4 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h4>物理结构：是指数据的逻辑结构在计算机中的存储形式数据是数据元素的集合。如何把数据元素存储到计算机的存储器中。如何存储数据元素之间的逻辑关系,是实现物理结构的重点和难点。<br>存储器主要是针对内存而言的,像硬盘、软盘、光盘等外部存储器的数据组织通常用文件结构来描述。</li><li>顺序存储结构<blockquote><p>顺序存储结构:是把数据元素存放在地址连续的存储单元里,其数据间的逻辑关系和物理关系是一致的。<br>说白了,就是排队占位。大家都按顺序排好,每个人占一小段空间,大家谁也别插谁的队。数组就是这样的顺序存储结构。<br>当你告诉计算机,你要建立一个有9个整型数据的数组时,计算机就在内存中找了片空地,按照一个整型所占位置的大小乘以9,开辟一段连续的空间,于是第一个数组数据就放在第一个位置,第二个数据放在第二个,这样依次摆放。  </p></blockquote></li><li>链式存储结构<blockquote><p>插队，添加，去掉，整个结构时刻都处于变化中。顺序存储是不科学的。<br>链式存储结构：是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。<br>数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置。<br>链式存储就灵活多了,数据存在哪里不重要,只要有一个指针存放了相应的地址就能找到它了。</p></blockquote><h2 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h2>我们在用示意图表示数据的逻辑结构时,要注意两点：<br>节点：将每一个数据元素看做一个结点,用圆圈表示。<br>连线：元素之间的逻辑关系用结点之间的连线表示,如果这个关系是有方向的,那么用带箭头的连线表示。</li></ul><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>各个计算机,不管是大型机、小型机、PC、平板电脑、PDA,甚至智能手机</p><h2 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h2><p>按照视点的不同,我们把数据结构分为：逻辑结构和物理结构。<br>逻辑结构是面向问题的,而物理结构就是面向计算机的,其基本的目标就是将数据及其逻辑关系存储到计算机的内存中。</p><h3 id="逻辑结构-1"><a href="#逻辑结构-1" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><p>逻辑结构分为：集合结构、线性结构、树形结构、图形结构。<br>逻辑结构是针对具体问题的,是为了解决某个问题，在对问题理解的基础上,选择一个合适的数据结构表示数据元素之间的逻辑关系。</p><h3 id="物理结构（存储结构）"><a href="#物理结构（存储结构）" class="headerlink" title="物理结构（存储结构）"></a>物理结构（存储结构）</h3><p>数据元素的存储结构形式有两种:顺序存储和链式存储。</p><h2 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h2><p>在C语言中,按照取值的不同,数据类型可以分为两类。<br>原子类型:是不可以再分解的基本类型,包括整型、实型、字符型等。<br>结构类型:由若干个类型组合而成,是可以再分解的。例如,整型数组是由若干整型数据组成的。</p><h1 id="同名"><a href="#同名" class="headerlink" title="同名"></a>同名</h1><p>物理结构、存储结构</p><h1 id="最"><a href="#最" class="headerlink" title="最"></a>最</h1><p>最需要关注的问题是逻辑结构。<br>数据的存储结构应正确反映数据元素之间的逻辑关系,这才是最为关键的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> wiki </tag>
            
            <tag> fix </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法</title>
      <link href="/%E7%AE%97%E6%B3%95/"/>
      <url>/%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>算法百科<br><a id="more"></a><br>数据结构与算法的关系:相互依赖不可分割的.<br>算法的定义:算法是解决特定问题求解步骤的描述,在计算机中为指令的有限序列,并且每条指令表示一个或多个操作。<br>算法的特性:有穷性、确定性、可行性、输入、输出。<br>算法的设计的要求:正确性、可读性、健壮性、高效率和低存储量需求。<br>算法特性与算法设计容易混,需要对比记忆。<br>算法的度量方法:事后统计方法(不科学、不准确)、事前分析估算方法。<br>在讲解如何用事前分析估算方法之前,我们先给出了函数渐近增长的定义。</p><h1 id="函数的渐近增长"><a href="#函数的渐近增长" class="headerlink" title="函数的渐近增长"></a>函数的渐近增长</h1><p>给定两个函数f(n)和g(n),<br>如果存在一个整数N,使得对于所有的n&gt;N,f(n)总是比g(n)大,那么,我们说fn)的增长渐近快于g(n)。<br>于是我们可以得出一个结论,判断一个算法好不好,我们只迪过少量的数据是不能做出准确判断的<br>对比算法的关键执行次数函数的渐近增长性,基本就可以分析出:某个算法,随着n的变大,它会越来越优于另一算法,或者越来越差于另一算法。<br>算法时间复杂度的定义</p><p>#推导大O阶的步骤</p><blockquote><p>用常数1取代运行时间中的所有加法常数。<br> 在修改后的运行次数函数中,只保留最高阶项。<br> 如果最高阶项存在且不是1,则去除与这个项相乘的常数。 </p></blockquote><p>得到的结果就是大0阶。<br>在得到算法的运行次数表达式后,很快得到它的时间复杂度,即大0阶。<br>推导大0阶很容易,但如何得到运行次数的表达式却是需要数学功底的。</p><h1 id="常见的时间复杂度所耗时间的大小排列"><a href="#常见的时间复杂度所耗时间的大小排列" class="headerlink" title="常见的时间复杂度所耗时间的大小排列"></a>常见的时间复杂度所耗时间的大小排列</h1><p>O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n2)&lt;O(n3)&lt;O(2”)&lt;O(n!)&lt;O(n”)<br>算法最坏情况和平均情况<br>空间复杂度<br>弄明白算法的时间复杂度的估算<br>深究自己写的代码是否效率低下,是不是可以通过优化让计算机更加快速高效。</p><h1 id="CPU与算法"><a href="#CPU与算法" class="headerlink" title="CPU与算法"></a>CPU与算法</h1><p>现在CPU越来越快,根本不用考虑算法的优劣,实现功能即可,用户感觉不到算法好坏造成的快慢？</p><p><blockquote>假设CPU在短短几年间,速度提高了100倍,这其实已经很夸张了。<br>而我们的某个算法本可以写出时间复杂度是O(n)的程序,却写出了0(n2)的程序,仅仅因为容易想到,也容易写。<br>即在O(n2)的时间复杂度算法程序下,速度其实只提高了10(√100=10),而对于0(n)时间复杂度的算法来说,那才是真的100倍。<br>也就是说,一台老式CPU的计算机运行O(n)的程序和一台速度提高100倍新式CPU运行O(n2)的程序。</blockquote><br>最终效率高的胜利方却是老式CPU的计算机,原因就在于算法的优劣直接决定了程序运行的效率。</p>]]></content>
      
      
      
        <tags>
            
            <tag> wiki </tag>
            
            <tag> fix </tag>
            
            <tag> mind </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>交易书单</title>
      <link href="/%E4%BA%A4%E6%98%93%E4%B9%A6%E5%8D%95/"/>
      <url>/%E4%BA%A4%E6%98%93%E4%B9%A6%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p>你可能永远也看不完<br><a id="more"></a><br>转载:量化小兵<br>1、期货市场技术分析 约翰·墨菲著</p><p>☆推荐理由：<br>    本书主要介绍商品期货技术分析，重点掌握的内容有技术分析的理论基础、道氏理论、图表简介、趋势的基本概念、主要反转形态、持续形态、交易量和持仓兴趣。全书基本概括了技术分析的所有内容，读者需要重点理解技术分析鼻祖查尔斯·道的道氏理论。赚大钱者无不是顺势而为，道氏理论就是趋势分析的理论基础，在此基础上通过掌握趋势、支撑和阻挡，以及价格形态（包括：主要的反转形态，以及主要的延续形态）来把握趋势。书中同时深入讨论了交易量和持仓兴趣，并说明如何用它们来证实价格变化或者发行趋势将要转折的信号。</p><p>2、通向财务自由之路 范K撒普著</p><p>☆推荐理由：<br>        这是一本十分适合量化交易入门的好书，它系统性介绍了一个交易系统的各个组成部分以及如何搭建自己的完整交易系统。同时，本书完整地介绍了不同的投资策略，本书还介绍了许多被其他投资著作所忽视的重要内容：预期、头寸规模、目标、大环境，资金管理等。大部分投资的人关心的都是如何入市，选择好时机和具体股票。但是本书作者认为入市不是最重要的，反而对入市时机、头寸管理、心理要素、退出时机做了很多详细的介绍。读者朋友们如果想为自己的系统设计好的退出机制以及如何守住利润推荐大家翻阅此书。</p><p>3、海龟交易法则 柯蒂斯·费思著</p><p>☆推荐理由：<br>    海龟交易法则是一个完整的交易系统，本书详细介绍了该交易系统的方方面面，从开仓条件，出场条件，止损，加仓，头寸管理，资金管理，风险管理每个方面都详细介绍。每一个趋势交易者都必须熟读并深刻理解海龟交易法则，这是一本需要交易者日日读，夜夜读，亏钱的时候读，赚钱的时候读，一直读到退出交易生涯为止的好书。该书短小精简，字字珠玑，交易过程中经历的每个阶段，翻过的每次错误，书中都有讲如何化解和解决。</p><p>4、幽灵的礼物 阿瑟·L·辛普森著</p><p>☆推荐理由：<br>    本书介绍了交易者在交易的过程需要遵守的各种规则，是交易心理建设的必备好书。即使有一个好的交易系统，在金融市场也不一定能够赚到钱，因为在交易过程中贯彻和执行力不够也会导致最终亏损出局。交易是失败者的游戏，经得起失败的人才是最大的胜利者。本书也是一本把止损讲到极致的书，全文内容很简单，其精髓就是止损，而且将止损做到极致。</p><p>5、股票趋势技术分析 迈吉巴塞蒂著</p><p>☆推荐理由：<br>    做股票择时和技术分析，基本上看这本书就够了，全书都在介绍如何在股票市场择时，书中还介绍了不少股票择时的经典策略。做股票交易或者投资，基本上两大流派，基本分析和技术分析，这本书堪称股票技术分析的开山鼻祖。</p><p>6、量化投资——策略与技术 丁 鹏著</p><p>☆推荐理由：<br>        《量化投资—策略与技术》是国内第一本有关量化投资策略的著作，也是很多人量化研究入门必备书籍，我学生时代和大学老师开始学习量化研究时也是无数遍翻阅这本书，虽然过了好几年，书中的策略可能不重要，但是本书为初学者介绍了每种策略类型应该如何构建以及策略研究方向。</p><p>7、量化投资策略—如何实现超额收益Alpha 理查德·托托里罗著</p><p>☆推荐理由：<br>        这是一本介绍Alpha选股的必备书籍。书中归纳了七个投资维度：盈利性、估值、现金流、成长性、资产配置、价格动量以及危险信号，并告诉读者如何有效结合单个投资因子或组件因子，如何构建多因子策略，从而构建更全面的选股模型。作者还介绍了如何将书中提出的策略有效地整合到你的投资过程中，以创造优秀的选股模型，构建自己的量化模型和投资组合，并实现超越市场的收益。</p><p>8、主动投资组合管理 理查德 C. 格林诺德著</p>]]></content>
      
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构概览</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A6%82%E8%A7%88/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A6%82%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<p>数据结构导图<br><a id="more"></a><br>完整性、系统性、针对性<br>掌握问题的本质<br>解题：思路、方法、技巧、能力<br>分析、理解、领会</p><p>数据结构、计算机组成原理、操作系统和计算机网络</p><p>线性表、栈和队列、树、图<br>线性表：顺序存储结构、链式存储结构<br>特殊矩阵的压缩存储<br>二叉树、线索二叉树、二叉排序树、平衡二叉树、森林<br>定义和概念、基本操作、存储结构和实现、特殊、遍历方法、构造、应用、复杂度分析<br>算法：概念、比较、分析和应用<br>查找算法：顺序查找、折半查找法、B-树、散列表<br>排序算法：插入排序、气泡排序、简单选择排序、希尔排序、快速排序、堆排序、二路归并排序和基数排序</p>]]></content>
      
      
      
        <tags>
            
            <tag> wiki </tag>
            
            <tag> fix </tag>
            
            <tag> mind </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>线性表</title>
      <link href="/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
      <url>/%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>数据结构之线性表<br><a id="more"></a></p><h2 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h2><p><img src="https://upload-images.jianshu.io/upload_images/6908911-957dd1bf3b253047.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="线性表的定义"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-b5651d8755dc784b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="线性表的定义"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-a32d5e37c6c288b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="线性结构分类"></p><h2 id="线性表的基本操作"><a href="#线性表的基本操作" class="headerlink" title="线性表的基本操作"></a>线性表的基本操作</h2><p><img src="https://upload-images.jianshu.io/upload_images/6908911-8732b0dcfa33f8fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="线性表的基本操作"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-5cf609d3da3bb9fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="线性表的基本操作"></p><h2 id="线性表两种存储结构各自的特点及比较"><a href="#线性表两种存储结构各自的特点及比较" class="headerlink" title="线性表两种存储结构各自的特点及比较"></a>线性表两种存储结构各自的特点及比较</h2><p><img src="https://upload-images.jianshu.io/upload_images/6908911-4d945d62429f9cd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="两种存储结构"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-56758df782fec87f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="比较"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-697d8320970c22df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="比较"></p><p><img src="https://upload-images.jianshu.io/upload_images/6908911-9f2c8facfb0f1f41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据结构、线性结构"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-1e08ecb6e76d2b4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="存储结构比较：效率"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-4a41ce148eb75fb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="存储结构比较：地址连续性"></p><h2 id="线性表的实现：存储结构及应用"><a href="#线性表的实现：存储结构及应用" class="headerlink" title="线性表的实现：存储结构及应用"></a>线性表的实现：存储结构及应用</h2><p><img src="https://upload-images.jianshu.io/upload_images/6908911-22431cb8b3461932.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="存储结构分类"></p><h2 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h2><p><img src="https://upload-images.jianshu.io/upload_images/6908911-ff0261d520374613.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="顺序表结构示意图"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-7b939d020770a0ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="顺序表结构体"></p><h2 id="顺序存储结构的基本操作"><a href="#顺序存储结构的基本操作" class="headerlink" title="顺序存储结构的基本操作"></a>顺序存储结构的基本操作</h2><p><img src="https://upload-images.jianshu.io/upload_images/6908911-ceea8b7b425d0c4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建清空判断更新"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-e09d194846e7ff4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="插入元素"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-038cdb3b411571ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="删除元素"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-6cbbd209cfd493c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="删除元素"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-76b50c91eff4215c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="插入和删除"></p><h2 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h2><p><img src="https://upload-images.jianshu.io/upload_images/6908911-1c2d238a8c333fe5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="链式存储结构"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-47c1b9529b3e7703.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="链式存储结构基本操作"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-381c02ed527bc9d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="链式存储结构基本操作"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-080b3d00bc2cdf75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="链式存储结构基本操作"></p><h2 id="其他常见的链式存储结构"><a href="#其他常见的链式存储结构" class="headerlink" title="其他常见的链式存储结构"></a>其他常见的链式存储结构</h2><p><img src="https://upload-images.jianshu.io/upload_images/6908911-8e998b4aa32070d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="其他常见的链式存储结构"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-561212d0e36619f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="其他常见的链式存储结构"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-a16f9d12d9b8e5e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="其他常见的链式存储结构"></p><p>线性表的应用<br>链式存储结构中指针的操作<br>链式存储结构中单链表的应用场合<br>带表头结点的单链表的应用场合<br>循环链表、的应用场合<br>双向循环链表的应用场合</p>]]></content>
      
      
      
        <tags>
            
            <tag> wiki </tag>
            
            <tag> fix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>todo</title>
      <link href="/todo/"/>
      <url>/todo/</url>
      
        <content type="html"><![CDATA[<p>坚持的力量<br><a id="more"></a><br>achieve</p><h2 id="每天"><a href="#每天" class="headerlink" title="每天"></a>每天</h2><h3 id="研报更新、资讯更新"><a href="#研报更新、资讯更新" class="headerlink" title="研报更新、资讯更新"></a>研报更新、资讯更新</h3><h3 id="列一个每年需重温的书单"><a href="#列一个每年需重温的书单" class="headerlink" title="列一个每年需重温的书单"></a>列一个每年需重温的书单</h3><h3 id="百词斩"><a href="#百词斩" class="headerlink" title="百词斩"></a>百词斩</h3><h3 id="英语口语"><a href="#英语口语" class="headerlink" title="英语口语"></a>英语口语</h3><h3 id="英语阅读"><a href="#英语阅读" class="headerlink" title="英语阅读"></a>英语阅读</h3><p>###<br>每个时代你都会遇到一本书<br>这本书取代了API参考手册,成为伴我干活的最亲密的书。<br>通读堆积如山的书籍和成百上千本技术期刊,还得再加上大量的实际经验。没错，我也想写一本这样的书。</p><h2 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h2><p>计算机英语<br>代码大全<br>NLTK<br>把所有的英文符号变成中文。<br>加一个评论系统</p><h2 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h2><p>算法</p><h1 id="计划的小项目"><a href="#计划的小项目" class="headerlink" title="计划的小项目"></a>计划的小项目</h1><p><a href="http://www.newxue.com/chengyu/z/" target="_blank" rel="noopener">新学网</a> 成语按意思查询 中高考各种相关知识</p><h2 id="后续阅读"><a href="#后续阅读" class="headerlink" title="后续阅读"></a>后续阅读</h2><p>人月神话：代码规范</p>]]></content>
      
      
      
        <tags>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>doing</title>
      <link href="/doing/"/>
      <url>/doing/</url>
      
        <content type="html"><![CDATA[<p>想向今天借今天。<br><a id="more"></a><br>2018/12/10 20:54:19    ireadweek文档<br>2018/12/10 20:34:44    完毕<br>2018/12/10 19:34:18    ireadweek<br>2018/12/10 14:38:27    代码大全<br>2018/12/10 10:37:19    代码大全<br>2018/12/10 10:00:00    杂七杂八<br>2018/12/10 8:08:26    标签分类<br>2018/12/10 7:53:56    整理post</p>]]></content>
      
      
      
        <tags>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tag</title>
      <link href="/tag/"/>
      <url>/tag/</url>
      
        <content type="html"><![CDATA[<p>tag全分类<br><a id="more"></a><br>25<br>空闲扩展、思考<br>achieve  todo<br>mind fix<br>book web menu github 转载<br>code<br>wiki one<br>数据据结构<br>ML NLP NLTK文本分析<br>编程基础 error python python基础 GUI 爬虫</p>]]></content>
      
      
      
        <tags>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tool</title>
      <link href="/tool/"/>
      <url>/tool/</url>
      
        <content type="html"><![CDATA[<p>工欲善其事必先利其器<br><a id="more"></a></p><h1 id="webs"><a href="#webs" class="headerlink" title="webs"></a>webs</h1><p><a href="http://www.newxue.com/chengyu/z/" target="_blank" rel="noopener">新学网</a> 成语按意思查询 中高考各种相关知识<br><a href="http://e.jd.com/" target="_blank" rel="noopener">京东读书在线阅读</a></p><h1 id="开发相关"><a href="#开发相关" class="headerlink" title="开发相关"></a>开发相关</h1><p><a href="http://www.runoob.com/font-awesome/fontawesome-reference.html" target="_blank" rel="noopener">fontawesome</a>  </p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>achieve</title>
      <link href="/achieve/"/>
      <url>/achieve/</url>
      
        <content type="html"><![CDATA[<p>思想的小巨人要脚踏实地呀。<br><a id="more"></a><br>achieve  todo  </p><h1 id="goal"><a href="#goal" class="headerlink" title="goal"></a>goal</h1><p>精通软件工程的生命周期<br>python、c、go、java<br>c：底层、操作系统、竞赛、算法。学好C转其他都很轻松。入门用py，C必须得学。<br>python：代码超过500行不可控。<br>Java：jvm<br>斌哥是为数不多的，把各类模型都涉猎了，并且知道哪些有用哪些没用的投资者</p><h1 id="2018年12月10日"><a href="#2018年12月10日" class="headerlink" title="2018年12月10日"></a>2018年12月10日</h1><p>发现一个 bug ，hexo 的 post 里面不能建立一个名为 tags 的文章。</p>]]></content>
      
      
      
        <tags>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>品格</title>
      <link href="/%E5%93%81%E6%A0%BC/"/>
      <url>/%E5%93%81%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<p>万世可流芳？<br><a id="more"></a></p><h1 id="坚持"><a href="#坚持" class="headerlink" title="坚持"></a>坚持</h1><p>人生最重要的不是向上或者向下，而是持续向前。</p>]]></content>
      
      
      
        <tags>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>品行</title>
      <link href="/%E5%93%81%E8%A1%8C/"/>
      <url>/%E5%93%81%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>活成你崇拜的模样。<br><a id="more"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>品味</title>
      <link href="/%E5%93%81%E5%91%B3/"/>
      <url>/%E5%93%81%E5%91%B3/</url>
      
        <content type="html"><![CDATA[<p>闲情逸致<br><a id="more"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>技能</title>
      <link href="/%E6%8A%80%E8%83%BD/"/>
      <url>/%E6%8A%80%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>成就你的和你成就的。<br><a id="more"></a><br>符号、函数调用、多线程、socket、虚拟内存、栈<br>类<br>面向对象思想<br>设计模式<br>命名规范<br>API文档</p>]]></content>
      
      
      
        <tags>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>立言</title>
      <link href="/%E7%AB%8B%E8%A8%80/"/>
      <url>/%E7%AB%8B%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p>说话的艺术。<br><a id="more"></a><br>这是数字资产定价模型当中一个比较有参考价值的思路，当然也还有很多可以改进的空间</p>]]></content>
      
      
      
        <tags>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习法</title>
      <link href="/%E5%AD%A6%E4%B9%A0%E6%B3%95/"/>
      <url>/%E5%AD%A6%E4%B9%A0%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>天天读的。<br><a id="more"></a><br>NLP六层次<br><img src="https://upload-images.jianshu.io/upload_images/6908911-272f95bec26198ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="能力金字塔"><br>记忆的规律<br><img src="https://upload-images.jianshu.io/upload_images/6908911-26de7dae76e69a14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效率金字塔"></p>]]></content>
      
      
      
        <tags>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>书评</title>
      <link href="/%E4%B9%A6%E8%AF%84/"/>
      <url>/%E4%B9%A6%E8%AF%84/</url>
      
        <content type="html"><![CDATA[<p>有营养的评论。<br><a id="more"></a><br>绝好指代书</p>]]></content>
      
      
      
        <tags>
            
            <tag> wiki </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>代码大全</title>
      <link href="/%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8/"/>
      <url>/%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>代码大全沉思录<br><a id="more"></a></p><h2 id="扬名立万"><a href="#扬名立万" class="headerlink" title="扬名立万"></a>扬名立万</h2><p>畅销书作者<br>杂志主编<br>计算机科学与技术委员会（Computer Science and Technology Board）<br>当艺术评论家聚在一起的时候,他们谈论的都是关于版式、结构以及意蕴之类的话题;而当真正的艺术家聚在起的时候,他们谈论的则是到哪儿才能买到更便宜的松节油。Pable PN毕加索)</p><h2 id="经年累月"><a href="#经年累月" class="headerlink" title="经年累月"></a>经年累月</h2><p>丰富的理论知识研究<br>当今的理论发展水平<br>前沿的开发实践<br>行之有效的编程实践经验技术<br>反映实践状况的产品级代码<br>编程经验、编程技术<br>项目（管理）经验<br>高质量代码习惯<br>实用、有效、强大<br>经验技巧、开发策略<br>软件开发领域<br>思维训练<br>项目思考。需求分析。<br>行动策略。具体情况作出更正确的决策。<br>避免反复陷入完全一样的战斗<br>编程原则是超越特定语言语法的。<br>实质地改善编程质量并提高工作效率</p><h3 id="你在技术浪潮中的位置"><a href="#你在技术浪潮中的位置" class="headerlink" title="你在技术浪潮中的位置"></a>你在技术浪潮中的位置</h3><p>自学程序员<br>经验不足的程序员、学生<br>参加过正规训练的程序员<br>软件开发者<br>一般商业实践<br>学习并掌握不止一门语言是专业程序员职业生涯的分水岭<br>强大的软件开发技术<br>优秀程序员<br>经验丰富的程序员<br>内行<br>软件架构师<br>项目负责人<br>分析师<br>业界研究<br>学术成果、研究成果<br>技术带头人、技术领导<br>专家经验<br>业界大师与教授。有些教授并不实际编写产品代码。教授们写出来的技术内容对于学生们的项目而言还行得通,但他们通常不知道如何在完整规模的开发环境中施展这些技术。</p><p>知识与商业实践大咖<br>软件工程界软件开发领域<br>编程领域的大众技术<br>前卫的软件开发实践迅速发展,但普通的实践手段并没有太大变化。<br>强大的编程技术已在学术论文和期刊里尘封了多年。<br>    软件业界以及学术界的研究人员已经发现了不少行之有效的实践经验，足以解决自20世纪70年代以来编程领域中日益蔓延的大多数问题。<br>    可是这些实践经验很少在高度专业化的技术期刊之外对外发表,所以时至今日大多数编程的机构和组织还没能用上这些技术。<br>有研究表明,一项研发成果从其诞生之日起,到进入商业实践阶段,通常要经历5到15年甚至更长的时间( Raghavan and Chand1989; Rogers1995; Parnas199)。<br>让那些关键性的研发成果现在就能为更多编程人员所用。</p><h1 id="阅读顺序"><a href="#阅读顺序" class="headerlink" title="阅读顺序"></a>阅读顺序</h1><h2 id="初级程序员"><a href="#初级程序员" class="headerlink" title="初级程序员"></a>初级程序员</h2><p>第18章“表驱动法”:将复杂的逻辑判断转换为查表,从而简化代码的编写与维护。另外,本章中的一个示例说明了,面向对象设计并不只要因为它是“面向对象”,就一定会好于其他的设计。</p><h2 id="高级程序员"><a href="#高级程序员" class="headerlink" title="高级程序员"></a>高级程序员</h2><p>第4章“关键的‘构建’决策”,本章关注的焦点是程序员和技术带头人个人必须(直接或间接)负责的项目准备工作</p><h2 id="项目经理"><a href="#项目经理" class="headerlink" title="项目经理"></a>项目经理</h2><p>第33章“个人性格”,程序设计是一项纯粹的脑力劳动,本章对挑选和培养优秀程序员提出了建议。<br>事实证明,相对于聪明程度(智商),个人性格(情商)对于造就出程序员高手更具有决定性的意义。</p><h2 id="低年级学生"><a href="#低年级学生" class="headerlink" title="低年级学生"></a>低年级学生</h2><p>第11章“变量名的力量”。</p><h2 id="高年级学生"><a href="#高年级学生" class="headerlink" title="高年级学生"></a>高年级学生</h2><p>第8章“防御式编程”<br>本章讲述如何面对严酷的充斥非法数据的真实世界,在遇到“绝不会发生”的事件和其他程序员犯下的错误时如何保护自己。<br>对于那些正在从学术环境转向专业开发环境的学生来说,这是必备的一课。</p><h2 id="制定编码标准的人"><a href="#制定编码标准的人" class="headerlink" title="制定编码标准的人"></a>制定编码标准的人</h2><p>看第32章“自说明代码”,<br>本章中有一段关于注释的精彩对话,它可能会改变您在制定编码标准时对注释的要求。</p><h2 id="自学编程的人"><a href="#自学编程的人" class="headerlink" title="自学编程的人"></a>自学编程的人</h2><p>第7章“高质量的子程序”,<br>本章详细讨论了子程序的命名和参数选择等问题,其中对子程序最佳长度的讨论颇有借鉴意义</p><h2 id="喜欢参与网上争论的人"><a href="#喜欢参与网上争论的人" class="headerlink" title="喜欢参与网上争论的人"></a>喜欢参与网上争论的人</h2><p>第13.3节“全局数据”和第17.3节“goto语句”,听听学术界在这些问题上的争论也挺有意思。</p><h1 id="立言"><a href="#立言" class="headerlink" title="立言"></a>立言</h1><p>他可是有切身经验的<br>有充分的理由相信<br>重要里程碑<br>最有价值<br>智慧传承<br>猎取收集</p><h1 id="导图"><a href="#导图" class="headerlink" title="导图"></a>导图</h1><h2 id="导图-1"><a href="#导图-1" class="headerlink" title="导图"></a>导图</h2><p>新语言<br>新开发过程<br>新方法论<br>设计<br>编程技术<br>编程思维方式<br>编程风格<br>编程工艺、软件工艺<br>软件项目<br>软件构建（活动、技术和诀窍）<br>构建细节：创建类的步骤<br>每个层次的注意事项<br>软件架构<br>编码标准<br>测试、系统测试<br>调试、重构、代码调优的技术和策略等<br>集成<br>高质量软件<br>提高软件质量是降低开发成本的重要途径</p><h1 id="指标：在更短的时间内写出更棒的程序"><a href="#指标：在更短的时间内写出更棒的程序" class="headerlink" title="指标：在更短的时间内写出更棒的程序"></a>指标：在更短的时间内写出更棒的程序</h1><p>优秀<br>开发效率<br>健壮<br>弹性<br>安全<br>规范<br>漏洞少，遇到的问题更少。为什么会遇到那些问题,如何在将来避免它们。反复尝试和试错的结晶。<br>交付快，更快速地进行开发<br>预算不超<br>用户的需求<br>掌控更大型的项目<br>项目的需求发生变动时帮助你成功地维护并修改已经开发出来的软件</p><h1 id="软件的首要技术使命"><a href="#软件的首要技术使命" class="headerlink" title="软件的首要技术使命"></a>软件的首要技术使命</h1><p>初级编程与高级编程</p><h2 id="编程基本要素及checklist-评估表"><a href="#编程基本要素及checklist-评估表" class="headerlink" title="编程基本要素及checklist 评估表"></a>编程基本要素及checklist 评估表</h2><p>软件架构<br>设计方法<br>类和子程序的命名和质量<br>代码可读性<br>变量、变量命名<br>类和函数命名<br>语句<br>数据类型<br>控制结构<br>设计<br>代码格式<br>代码布局<br>项目管理方法<br>需求<br>测试、测试用例<br>什么是可行<br>什么是不可行的<br>分阶段( phase)进行、还是迭代式(interation)进行<br>构建错误、需求分析错误、架构错误<br>潜心分析需求<br>精心设计架构<br>脚踏实地测试</p><h2 id="有效开发实践"><a href="#有效开发实践" class="headerlink" title="有效开发实践"></a>有效开发实践</h2><p>防御式编程、表驱动法、协同构建、开发者测试、性能优化</p><p>软件开发技术信息来源</p><p>##<br>链接各种数据库的代码<br>常用的js代码</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>代码补全功能是如何实现的<br>子程序是中国特色吗</p><h1 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h1><h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><p>《Java编程入门》<br>《高级Java编程》<br>《高高级Java编程》<br>Intel或 Motorola的硬件参考手册<br>Microsoft Windows或 Linux操作系统的函数手册</p><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><h2 id="专业经验"><a href="#专业经验" class="headerlink" title="专业经验"></a>专业经验</h2><h2 id="其他软件著作"><a href="#其他软件著作" class="headerlink" title="其他软件著作"></a>其他软件著作</h2><h2 id="编程语言书籍"><a href="#编程语言书籍" class="headerlink" title="编程语言书籍"></a>编程语言书籍</h2><h2 id="杂志上的文章"><a href="#杂志上的文章" class="headerlink" title="杂志上的文章"></a>杂志上的文章</h2><h2 id="技术参考资料"><a href="#技术参考资料" class="headerlink" title="技术参考资料"></a>技术参考资料</h2>]]></content>
      
      
      
        <tags>
            
            <tag> mind </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>代码大全书籍介绍</title>
      <link href="/%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8%E4%B9%A6%E7%B1%8D%E4%BB%8B%E7%BB%8D/"/>
      <url>/%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8%E4%B9%A6%E7%B1%8D%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>代码大全书籍相关<br><a id="more"></a><br>书中<a href="http://www.cc2e.com/" target="_blank" rel="noopener">代码网址</a>已失效。<br>2006年4月<br>[美]Steve McConnell 金戈<br><img src="https://upload-images.jianshu.io/upload_images/6908911-c94a15af59467ccf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码大全联系作者"></p><h2 id="书评"><a href="#书评" class="headerlink" title="书评"></a>书评</h2><p>全面更新、与时俱进<br>绝佳指导书、终极百科全书、百科全书式的手册、<br>宝藏、智慧、财富、巨大宝库<br>特别注重、详细介绍、广泛剖析<br>展示、列举、提供、填补、涵盖、详述 、归纳总结、汇集、整理、归纳统一并广泛传播<br>最易懂<br>翔实、易用、指南<br>提高本书说服力<br>对  都是大有裨益的<br>想  ，阅读本书不会让你失望<br>通向智慧的捷径<br>读起来饶有趣味<br>这无疑是我所看过的  方面最好的书籍<br>每个时代你都会遇到一本书<br>如果你  就该有<br>每个  都该有一本<br>并且每年从头到尾读一遍<br>我每年都读这本书，仍能从中有新的收获<br>十年里 没有出现比 更权威的书。<br>帮助读者用较短的时间较少的麻烦去<br>其风格和内容是切实可用的<br>创新书籍<br>提供你获得经验的捷径<br>节省数年走弯路的时间<br>千言万语都无法说明这本书有多好。<br>标题尚不足以表达出该作品的全部智慧与内涵。<br>我认为是软件构建方面很好的书,每个软件开发人员的书架上都该有这本书<br>每个程序员都该读读这本杰出的书籍。<br>假如你期望成为专业程序员,这将是你投资35美元能得到的最好回报。不要只是看看这<br>个书评,赶快冲出去买一本回来! McConnell声称此书意在拉近业界大师的知识与一般商业实<br>践之间的距离……令人称奇的是他做到了。<br>应当让在软件开发领域中的每个人都来读读《代码大全》<br>我不遗余力地为 Steve McConnell的《代码大全》拍手叫好……这本书取代了API参考手册,成为伴我干活的最亲密的书。<br>这本编纂精良的巨著有望成为软件实现的实践方面最好的专著。<br>该书必将成为一部经典的、所有开发人员及其管理者必备的读物。<br>本书的精华内容<br>在其他书里恐怕很难找到如此详尽的对 的讨论。<br>在过去的10余年中,这本书影响了整整一代程序员“代码大全”四个字已成为一个响当当的名字。<br>这本书用了整整一章(30多页)的篇幅来讲解“为变量命名”这一编程中最常见的活动,这里提供的建议在别的书里是很难见到的。<br>当然,这整本书都非常值得一读,准确地说,值得反复阅读。书中不仅有实实在在的数据和论述,也有一些有趣的比喻,作者偶尔还开开玩笑,读起来一点也不枯燥。<br>本书介绍了一些当今最为时兴的技术,其中有许多还未被广泛采用。<br>正因为本书撷取了实践与研究两者的精髓。萃取了其中的精华<br>经久不衰,受用多年。</p>]]></content>
      
      
      
        <tags>
            
            <tag> mind </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>checklist</title>
      <link href="/checklist/"/>
      <url>/checklist/</url>
      
        <content type="html"><![CDATA[<p>值得每年都通读几遍的清单。<br><a id="more"></a><br><a href="/核对表:需求/">核对表:需求</a><br><a href="/核对表:架构/">核对表:架构</a><br><a href="/核对表:前期准备/">核对表:前期准备</a><br><a href="/核对表:主要的构建实践/">核对表:主要的构建实践</a><br><a href="/核对表:软件构造中的设计/">核对表:软件构造中的设计</a><br><a href="/核对表:类的质量/">核对表:类的质量</a><br><a href="/核对表:高质量的子程序/">核对表:高质量的子程序</a><br><a href="/核对表:防御式编程/">核对表:防御式编程</a><br><a href="/核对表:伪代码编程过程/">核对表:伪代码编程过程</a><br><a href="/核对表:使用数据的一般事项/">核对表:使用数据的一般事项</a><br><a href="/核对表:变量命名/">核对表:变量命名</a><br><a href="/核对表:基本数据类型/">核对表:基本数据类型</a><br><a href="/核对表:使用不常见数据类型的注意事项/">核对表:使用不常见数据类型的注意事项</a><br><a href="/核对表:组织直线型代码/">核对表:组织直线型代码</a><br><a href="/核对表:使用条件语句/">核对表:使用条件语句</a><br><a href="/核对表:循环/">核对表:循环</a><br><a href="/核对表:不常见的控制结构/">核对表:不常见的控制结构</a><br><a href="/核对表:表驱动法/">核对表:表驱动法</a><br><a href="/核对表:控制结构相关事宜/">核对表:控制结构相关事宜</a><br><a href="/核对表:质量保证计划/">核对表:质量保证计划</a><br><a href="/核对表:有效的结对编程/">核对表:有效的结对编程</a><br><a href="/核对表:有效的详查/">核对表:有效的详查</a><br><a href="/核对表:测试用例/">核对表:测试用例</a><br><a href="/核对表:关于调试的建议/">核对表:关于调试的建议</a><br><a href="/核对表:重构的理由/">核对表:重构的理由</a><br><a href="/核对表:重构总结/">核对表:重构总结</a><br><a href="/核对表:安全的重构/">核对表:安全的重构</a><br><a href="/核对表:代码调整策略/">核对表:代码调整策略</a><br><a href="/核对表:代码调整方法/">核对表:代码调整方法</a><br><a href="/核对表:配置管理/">核对表:配置管理</a><br><a href="/核对表:集成/">核对表:集成</a><br><a href="/核对表:编程工具/">核对表:编程工具</a><br><a href="/核对表:布局/">核对表:布局</a><br><a href="/核对表:自说明代码/">核对表:自说明代码</a><br><a href="/核对表:好的注释技术/">核对表:好的注释技术</a>   </p>]]></content>
      
      
      
        <tags>
            
            <tag> mind </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>构建</title>
      <link href="/%E6%9E%84%E5%BB%BA/"/>
      <url>/%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>构建百科<br><a id="more"></a><br>计划、设计、检查</p><p>构建(construction)<br>建筑工人(construction workers)<br>硬纸板(construction paper)</p><p>你一定知道“构建( construction)”一词在软件开发领域之外的含义。<br>构建就是“建筑工人( construction workers)”在建设一栋房屋、一所学校、乃至一座摩天大楼时所做的工作。<br>在你年轻时,可能也曾用“硬纸板( construction paper)”构建过什么东西。<br>按照一般的用法,“构建”是指建设的过程。<br>构建过程可能包含有计划、设计、检查工作的一些方面,但在多数时候,“构建”就是指创建事物过程中动手的那些部分。</p>]]></content>
      
      
      
        <tags>
            
            <tag> wiki </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>软件构建</title>
      <link href="/%E8%BD%AF%E4%BB%B6%E6%9E%84%E5%BB%BA/"/>
      <url>/%E8%BD%AF%E4%BB%B6%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>代码大全之软件构建<br><a id="more"></a></p><h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><p><img src="https://upload-images.jianshu.io/upload_images/6908911-f973558f62138af6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="要点"></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p><a href="/构建">构建</a>   正式和非正式项目的红头文件<br>构建有时也被认为是“编码( coding)”或“编程( programming)”。<br>“编码”算不上是最贴切的词,因为它有一种“把已经存在的设计机械化地翻译成计算机语言”的意味;<br>而构建并不都是这么机械化的,需要可观的创造力和判断力。<br>在全书中,我也常常用“编程”代替“构建”。</p><h1 id="清单"><a href="#清单" class="headerlink" title="清单"></a>清单</h1><p>软件开发过程中的各种不同的活动( activity):<br>定义问题(problem definition)<br>需求分析(requirements development)<br>规划构建(construction planning)<br>软件架构(software architecture),或高层设计(high- -level design)<br>详细设计(detailed design)<br>编码与调试(coding and debugging)<br>单元测试(unit testing)<br>集成测试(integration testing)<br>集成(Integration)<br>系统测试(system testing)<br>保障维护(corrective maintenance)</p><h1 id="具体活动"><a href="#具体活动" class="headerlink" title="具体活动"></a>具体活动</h1><p>验证有关的基础工作已经完成,因此构建活动可以顺利地进行下去。<br>确定如何测试所写的代码。<br>设计并编写类( class)和子程序( routine)。<br>创建并命名变量( variable)和具名常量( named constant)。<br>选择控制结构( control structure),组织语句块。<br>对你的代码进行单元测试和集成测试,并排除其中的错误。<br>评审开发团队其他成员的底层设计和代码,并让他们评审你的工作。<br>润饰代码,仔细进行代码的格式化和注释<br>将单独开发的多个软件组件集成为一体<br>调整代码( tuning code),让它更快、更省资源。</p><h1 id="重要的非构建活动"><a href="#重要的非构建活动" class="headerlink" title="重要的非构建活动"></a>重要的非构建活动</h1><p>管理( management)、需求分析、软件架构设计、用户界面设计、系统测试、维护</p><h1 id="激动人心的项目"><a href="#激动人心的项目" class="headerlink" title="激动人心的项目"></a>激动人心的项目</h1><p>互联网、电影特技、医疗中的生命维持系统、太空计划、航空、高速金融分析、科学研究</p><h1 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h1><p><img src="https://upload-images.jianshu.io/upload_images/6908911-12ba8a06a07852de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="构建活动的地位"></p><h1 id="构建的重要性"><a href="#构建的重要性" class="headerlink" title="构建的重要性"></a>构建的重要性</h1><p><img src="https://upload-images.jianshu.io/upload_images/6908911-c5bab172a8062ff9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编程重要性"></p>]]></content>
      
      
      
        <tags>
            
            <tag> wiki </tag>
            
            <tag> mind </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>生产率</title>
      <link href="/%E7%94%9F%E4%BA%A7%E7%8E%87/"/>
      <url>/%E7%94%9F%E4%BA%A7%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<p>效率<br><a id="more"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> wiki </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>丰富多彩的计算机语言</title>
      <link href="/%E4%B8%B0%E5%AF%8C%E5%A4%9A%E5%BD%A9%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/"/>
      <url>/%E4%B8%B0%E5%AF%8C%E5%A4%9A%E5%BD%A9%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p>天天<br><a id="more"></a><br>丰富多彩的计算机语言<br>病毒(virus))<br>特洛伊木马(Trojanhorse)<br>蠕虫(worm)<br>臭虫(bug)<br>逻辑炸弹(bomb)<br>崩溃(crash)<br>论坛口水战(flame)<br>双绞线转换头(twistedsexchanger)<br>还有致命错误((fatalerror)</p>]]></content>
      
      
      
        <tags>
            
            <tag> wiki </tag>
            
            <tag> fix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>隐喻</title>
      <link href="/%E9%9A%90%E5%96%BB/"/>
      <url>/%E9%9A%90%E5%96%BB/</url>
      
        <content type="html"><![CDATA[<p>代码大全之隐喻<br><a id="more"></a></p><h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><p>隐喻是启示而不是算法。因此它们往往有一点随意( sloopy)。<br>隐喻把软件开发过程与其他你熟系的活动联系在一起,帮助你更好地理解。<br>仔细的准备是必要的。<br>而大型项目和小型项目之间也是有差异的。<br>通过把软件开发中的实践比作是智慧工具箱中的工具。<br>每位程序员都有许多工具,但并不存在任何一个能适用于所有工作的工具,因地制宜地选择正确工具是成为能有效编程的程序员的关键。</p><h1 id="建筑引申"><a href="#建筑引申" class="headerlink" title="建筑引申"></a>建筑引申</h1><p>软件架构(建筑学, architecture)、<br>支撑性测试代码(脚手架,scaffolding)、<br>构建(建设, constructon)、<br>基础类( foundation classes)<br>分离代码( tearing code apart)。<br>你可能还听说过更多这一类的词语。</p><h1 id="同名"><a href="#同名" class="headerlink" title="同名"></a>同名</h1><p>方法技术技巧诀窍</p><h1 id="过程隐喻"><a href="#过程隐喻" class="headerlink" title="过程隐喻"></a>过程隐喻</h1><p>隐喻、类比、模型、概念化、泛型<br>启发式、探索式<br>完整、充分<br>可读性<br>春天播种了一个代码种子，希望秋天收获丰盛的代码<br>播种、耕作、小步前进<br>生长、累积、冲积层、珍珠、提炼<br>growing、accretion、incremental、iterative、adaptive、evolutionary<br>培育、生长、增量、迭代、自适应、演进<br>writing、building<br>增量式开发：<br>先做出一个简单可行版本。一次增加一小部分代码，直到得到一个完全可以工作的系统<br>principle不仅指原则，还指原理。<br>演进式交付( Evolutionary Delivery)<br>敏捷编程( agile programming)</p><p>计划、准备及执行、设计与重构<br>定义、设计、编码、优化、评审、审查<br>省时省力<br>容器类( containerclasses)、科学计算函数、用户界面组件、数据库访问组件<br>调用别人的库，如砖块。自己编写那些现成的代码通常是没有意义的<br>自己编写库，如自己定制的高档家具<br>速度和精读的提升<br>成果<br>适当的多层次规划对编程是有好处的。<br>精心计划不意味事无巨细的计划或过度计划<br>在后期改变细节的能力。改变不会出重大事故。安全、时间成本和物资成本<br>核查。留有余地以保证安全。<br>对结构进行超出常规的规划和建设（over-engineered）<br>超大型的项目要更高级别的规划<br>这就是开发经验啦<br>Capers Jones发表的报告称,一套100万行代码的软件系统,平均需要69种文档(1998)。<br>其需求规格文档一般有四五千页长,而设计文档常常是需求的两三倍长。<br>不太可能有哪个人能完全理解这种规模的项目的所有设计细节——甚至只是通读一遍都不那么容易。因此,更充分的准备工作也就理所应当了。<br>有没有更好的工具</p><p>启发、受益</p><p>灵活轻量级的开发方法<br>严格重量级的开发方法</p><h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><p>另一个关于软件方面的耕作的比喻,<br>RethinkingSystems Analysisnd Design<br>Weinberg 1988<br>On the Originsof Designer Intuition(论设计直觉的源泉) 这一章</p><p>深入阅读关于“构建隐喻”的引申,请见“是什么撑起了天花板What Supportsthe Roof)”一文(Starr 2003)</p><p>在关于隐喻、模型( model)以及范型( paradigm)方面的众多书籍中, THomasKuhn写的那本是试金石。<br>Kuhn, THomas S.《科学变革的结构》(第三版)( The Structure of ScientificRevolutions, 3d ed. Chicago, IL: The University of Chicago Press, 1996.). Kuhn *-在一个达尔文周期中,科学理论如何相对于其他理论而诞生、发展并消亡的书,于1962年首次发布,奠定了科学哲学的基础。<br>该书短小精悍,列举了大量科学中隐喻、模型以及范型间此消彼长的有趣示例。</p><p>Floyd, Robert w.“编程范型”(“ The Paradigms of Programming.”1978年图灵奖的颁奖演讲)<br>《 Communications of the ACM》(《ACM通讯》), August1979,pp.455—460.<br>这是一篇令人神往的关于软件开发中的模型的讨论, Floyd将Kuhn的理念用到了编程上。</p><p>#</p><p>好的工匠知道完成某项工作要用哪样工具,也知道该怎样正确地使用。<br>编程方面的知识学得越多,你脑中的工具箱中就会有更多的分析工具,也会知道该在何时用这些工具,以及怎样正确地使用它们。<br>在软件领域里,专业的咨询人员有时会让你专用某种软件开发方法而远离其他方法。这样并不妥当,因为当你百分之百地依赖于某一方法论时,你就只会用一种方法去看世界了。<br>某些情况下,对于你所面临的问题还有其他更好的方法,你可能错失良机。这种“工具箱隐喻”能够帮助你把所有的方法、技术以及技巧留在脑海中—合适的时候即可拿来就用</p>]]></content>
      
      
      
        <tags>
            
            <tag> wiki </tag>
            
            <tag> 思考 </tag>
            
            <tag> 空闲扩展 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
